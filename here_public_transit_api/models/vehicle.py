# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vehicle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipped_hazardous_goods': 'str',
        'gross_weight': 'int',
        'weight_per_axle': 'int',
        'weight_per_axle_group': 'WeightPerAxleGroup',
        'height': 'int',
        'width': 'int',
        'length': 'int',
        'tunnel_category': 'TunnelCategory',
        'axle_count': 'int',
        'trailer_axle_count': 'int',
        'tires_count': 'int',
        'category': 'str',
        'trailer_count': 'int',
        'hov_occupancy': 'int',
        'license_plate': 'str',
        'speed_cap': 'float',
        'type': 'VehicleType'
    }

    attribute_map = {
        'shipped_hazardous_goods': 'shippedHazardousGoods',
        'gross_weight': 'grossWeight',
        'weight_per_axle': 'weightPerAxle',
        'weight_per_axle_group': 'weightPerAxleGroup',
        'height': 'height',
        'width': 'width',
        'length': 'length',
        'tunnel_category': 'tunnelCategory',
        'axle_count': 'axleCount',
        'trailer_axle_count': 'trailerAxleCount',
        'tires_count': 'tiresCount',
        'category': 'category',
        'trailer_count': 'trailerCount',
        'hov_occupancy': 'hovOccupancy',
        'license_plate': 'licensePlate',
        'speed_cap': 'speedCap',
        'type': 'type'
    }

    def __init__(self, shipped_hazardous_goods=None, gross_weight=None, weight_per_axle=None, weight_per_axle_group=None, height=None, width=None, length=None, tunnel_category=None, axle_count=None, trailer_axle_count=None, tires_count=None, category='undefined', trailer_count=0, hov_occupancy=1, license_plate=None, speed_cap=None, type=None):  # noqa: E501
        """Vehicle - a model defined in Swagger"""  # noqa: E501
        self._shipped_hazardous_goods = None
        self._gross_weight = None
        self._weight_per_axle = None
        self._weight_per_axle_group = None
        self._height = None
        self._width = None
        self._length = None
        self._tunnel_category = None
        self._axle_count = None
        self._trailer_axle_count = None
        self._tires_count = None
        self._category = None
        self._trailer_count = None
        self._hov_occupancy = None
        self._license_plate = None
        self._speed_cap = None
        self._type = None
        self.discriminator = None
        if shipped_hazardous_goods is not None:
            self.shipped_hazardous_goods = shipped_hazardous_goods
        if gross_weight is not None:
            self.gross_weight = gross_weight
        if weight_per_axle is not None:
            self.weight_per_axle = weight_per_axle
        if weight_per_axle_group is not None:
            self.weight_per_axle_group = weight_per_axle_group
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if length is not None:
            self.length = length
        if tunnel_category is not None:
            self.tunnel_category = tunnel_category
        if axle_count is not None:
            self.axle_count = axle_count
        if trailer_axle_count is not None:
            self.trailer_axle_count = trailer_axle_count
        if tires_count is not None:
            self.tires_count = tires_count
        if category is not None:
            self.category = category
        if trailer_count is not None:
            self.trailer_count = trailer_count
        if hov_occupancy is not None:
            self.hov_occupancy = hov_occupancy
        if license_plate is not None:
            self.license_plate = license_plate
        if speed_cap is not None:
            self.speed_cap = speed_cap
        if type is not None:
            self.type = type

    @property
    def shipped_hazardous_goods(self):
        """Gets the shipped_hazardous_goods of this Vehicle.  # noqa: E501

        Comma-separated list of shipped hazardous goods in the vehicle.  Possible values are:  * `explosive`: Explosive material * `gas`: Gas * `flammable`: Flammable material * `combustible`: Combustible material * `organic`: Organic material * `poison`: Poison * `radioactive`: Radioactive material * `corrosive`: Corrosive material * `poisonousInhalation`: Materials that are poisonous upon inhalation * `harmfulToWater`: Materials that are harmful to water * `other`: Other types of hazardous materials  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The shipped_hazardous_goods of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._shipped_hazardous_goods

    @shipped_hazardous_goods.setter
    def shipped_hazardous_goods(self, shipped_hazardous_goods):
        """Sets the shipped_hazardous_goods of this Vehicle.

        Comma-separated list of shipped hazardous goods in the vehicle.  Possible values are:  * `explosive`: Explosive material * `gas`: Gas * `flammable`: Flammable material * `combustible`: Combustible material * `organic`: Organic material * `poison`: Poison * `radioactive`: Radioactive material * `corrosive`: Corrosive material * `poisonousInhalation`: Materials that are poisonous upon inhalation * `harmfulToWater`: Materials that are harmful to water * `other`: Other types of hazardous materials  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param shipped_hazardous_goods: The shipped_hazardous_goods of this Vehicle.  # noqa: E501
        :type: str
        """

        self._shipped_hazardous_goods = shipped_hazardous_goods

    @property
    def gross_weight(self):
        """Gets the gross_weight of this Vehicle.  # noqa: E501

        Vehicle weight including trailers and shipped goods, in kilograms.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The gross_weight of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._gross_weight

    @gross_weight.setter
    def gross_weight(self, gross_weight):
        """Sets the gross_weight of this Vehicle.

        Vehicle weight including trailers and shipped goods, in kilograms.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param gross_weight: The gross_weight of this Vehicle.  # noqa: E501
        :type: int
        """

        self._gross_weight = gross_weight

    @property
    def weight_per_axle(self):
        """Gets the weight_per_axle of this Vehicle.  # noqa: E501

        Heaviest vehicle weight per axle, in kilograms.  Heaviest weight per axle, regardless of axle type or axle group. It is evaluated against all axle weight restrictions, including single axle and tandem axle weight restrictions. It is useful if differences between axle types, like tandem and triple axles, are not relevant. This is the case in many countries, since they don't distinguish between these different axle groups on signs and in regulations.  More fine-grained axle weight input is possible with `weightPerAxleGroup`.  **Note:** `weightPerAxleGroup` and `weightPerAxle` are incompatible. **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The weight_per_axle of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._weight_per_axle

    @weight_per_axle.setter
    def weight_per_axle(self, weight_per_axle):
        """Sets the weight_per_axle of this Vehicle.

        Heaviest vehicle weight per axle, in kilograms.  Heaviest weight per axle, regardless of axle type or axle group. It is evaluated against all axle weight restrictions, including single axle and tandem axle weight restrictions. It is useful if differences between axle types, like tandem and triple axles, are not relevant. This is the case in many countries, since they don't distinguish between these different axle groups on signs and in regulations.  More fine-grained axle weight input is possible with `weightPerAxleGroup`.  **Note:** `weightPerAxleGroup` and `weightPerAxle` are incompatible. **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param weight_per_axle: The weight_per_axle of this Vehicle.  # noqa: E501
        :type: int
        """

        self._weight_per_axle = weight_per_axle

    @property
    def weight_per_axle_group(self):
        """Gets the weight_per_axle_group of this Vehicle.  # noqa: E501


        :return: The weight_per_axle_group of this Vehicle.  # noqa: E501
        :rtype: WeightPerAxleGroup
        """
        return self._weight_per_axle_group

    @weight_per_axle_group.setter
    def weight_per_axle_group(self, weight_per_axle_group):
        """Sets the weight_per_axle_group of this Vehicle.


        :param weight_per_axle_group: The weight_per_axle_group of this Vehicle.  # noqa: E501
        :type: WeightPerAxleGroup
        """

        self._weight_per_axle_group = weight_per_axle_group

    @property
    def height(self):
        """Gets the height of this Vehicle.  # noqa: E501

        Vehicle height, in centimeters.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The height of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Vehicle.

        Vehicle height, in centimeters.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param height: The height of this Vehicle.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this Vehicle.  # noqa: E501

        Vehicle width, in centimeters.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The width of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Vehicle.

        Vehicle width, in centimeters.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param width: The width of this Vehicle.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def length(self):
        """Gets the length of this Vehicle.  # noqa: E501

        Vehicle length, in centimeters.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The length of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Vehicle.

        Vehicle length, in centimeters.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param length: The length of this Vehicle.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def tunnel_category(self):
        """Gets the tunnel_category of this Vehicle.  # noqa: E501


        :return: The tunnel_category of this Vehicle.  # noqa: E501
        :rtype: TunnelCategory
        """
        return self._tunnel_category

    @tunnel_category.setter
    def tunnel_category(self, tunnel_category):
        """Sets the tunnel_category of this Vehicle.


        :param tunnel_category: The tunnel_category of this Vehicle.  # noqa: E501
        :type: TunnelCategory
        """

        self._tunnel_category = tunnel_category

    @property
    def axle_count(self):
        """Gets the axle_count of this Vehicle.  # noqa: E501

        Value specifying the total number of axles the vehicle has i.e., axles on the base vehicle and any attached trailers.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The axle_count of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._axle_count

    @axle_count.setter
    def axle_count(self, axle_count):
        """Sets the axle_count of this Vehicle.

        Value specifying the total number of axles the vehicle has i.e., axles on the base vehicle and any attached trailers.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param axle_count: The axle_count of this Vehicle.  # noqa: E501
        :type: int
        """

        self._axle_count = axle_count

    @property
    def trailer_axle_count(self):
        """Gets the trailer_axle_count of this Vehicle.  # noqa: E501

        Value specifying the total number of axles across all the trailers attached to the vehicle. This number is included in `axleCount`, hence `trailerAxleCount` must be less than `axleCount`.  **Limitations:** only valid for `transportMode=truck`, `trailerCount` > 0 and `axleCount` > 1.  Note: This parameter is currently used only for calculation of tolls in regions where it is applicable.   # noqa: E501

        :return: The trailer_axle_count of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._trailer_axle_count

    @trailer_axle_count.setter
    def trailer_axle_count(self, trailer_axle_count):
        """Sets the trailer_axle_count of this Vehicle.

        Value specifying the total number of axles across all the trailers attached to the vehicle. This number is included in `axleCount`, hence `trailerAxleCount` must be less than `axleCount`.  **Limitations:** only valid for `transportMode=truck`, `trailerCount` > 0 and `axleCount` > 1.  Note: This parameter is currently used only for calculation of tolls in regions where it is applicable.   # noqa: E501

        :param trailer_axle_count: The trailer_axle_count of this Vehicle.  # noqa: E501
        :type: int
        """

        self._trailer_axle_count = trailer_axle_count

    @property
    def tires_count(self):
        """Gets the tires_count of this Vehicle.  # noqa: E501

        Value specifying the total number of tires the vehicle has i.e., tires on the base vehicle and any attached trailers.  Note: This parameter is currently used only for calculation of tolls in regions where it is applicable.   # noqa: E501

        :return: The tires_count of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._tires_count

    @tires_count.setter
    def tires_count(self, tires_count):
        """Sets the tires_count of this Vehicle.

        Value specifying the total number of tires the vehicle has i.e., tires on the base vehicle and any attached trailers.  Note: This parameter is currently used only for calculation of tolls in regions where it is applicable.   # noqa: E501

        :param tires_count: The tires_count of this Vehicle.  # noqa: E501
        :type: int
        """

        self._tires_count = tires_count

    @property
    def category(self):
        """Gets the category of this Vehicle.  # noqa: E501

        Specifies the category of the vehicle. The supported values are:  * `undefined`: The vehicle category is undefined and no special considerations are taken into   account. Vehicle routing will proceed as normal. * `lightTruck`: The vehicle is a truck light enough to be classified more as a car than as a truck.   I.e., this exempts it from many legal restrictions for normal trucks. Restrictions related   to the physical dimensions of the truck, or its cargo, however, still apply.    Please refer to the developer guide for further details on Truck Categories.    **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The category of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Vehicle.

        Specifies the category of the vehicle. The supported values are:  * `undefined`: The vehicle category is undefined and no special considerations are taken into   account. Vehicle routing will proceed as normal. * `lightTruck`: The vehicle is a truck light enough to be classified more as a car than as a truck.   I.e., this exempts it from many legal restrictions for normal trucks. Restrictions related   to the physical dimensions of the truck, or its cargo, however, still apply.    Please refer to the developer guide for further details on Truck Categories.    **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param category: The category of this Vehicle.  # noqa: E501
        :type: str
        """
        allowed_values = ["undefined", "lightTruck"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def trailer_count(self):
        """Gets the trailer_count of this Vehicle.  # noqa: E501

        Number of trailers attached to the vehicle.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :return: The trailer_count of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._trailer_count

    @trailer_count.setter
    def trailer_count(self, trailer_count):
        """Sets the trailer_count of this Vehicle.

        Number of trailers attached to the vehicle.  **Limitations:** only valid for `transportMode=truck`.   # noqa: E501

        :param trailer_count: The trailer_count of this Vehicle.  # noqa: E501
        :type: int
        """

        self._trailer_count = trailer_count

    @property
    def hov_occupancy(self):
        """Gets the hov_occupancy of this Vehicle.  # noqa: E501

        Number of occupants (defined as occupying a seat with a restraint device) in the vehicle. This value affects the ability of the router to use HOV (High-Occupancy Vehicles) restricted lanes.  Limitations:   * currently, any value over 1 is interpreted as being able to use any HOV lane (including, e.g. those restricted to 3+ passengers).  **Disclaimer: this parameters are work in progress and functionality is not complete**   # noqa: E501

        :return: The hov_occupancy of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._hov_occupancy

    @hov_occupancy.setter
    def hov_occupancy(self, hov_occupancy):
        """Sets the hov_occupancy of this Vehicle.

        Number of occupants (defined as occupying a seat with a restraint device) in the vehicle. This value affects the ability of the router to use HOV (High-Occupancy Vehicles) restricted lanes.  Limitations:   * currently, any value over 1 is interpreted as being able to use any HOV lane (including, e.g. those restricted to 3+ passengers).  **Disclaimer: this parameters are work in progress and functionality is not complete**   # noqa: E501

        :param hov_occupancy: The hov_occupancy of this Vehicle.  # noqa: E501
        :type: int
        """

        self._hov_occupancy = hov_occupancy

    @property
    def license_plate(self):
        """Gets the license_plate of this Vehicle.  # noqa: E501

        Specifies information about the vehicle's license plate number. This information is used to evaluate whether certain vehicle restrictions in environmental zones apply. Currently, only the last character of the license plate can be provided.  Format: `lastCharacter:{character}`  Example: `lastCharacter:2`  **Disclaimer: this parameters are work in progress and functionality is not complete**   # noqa: E501

        :return: The license_plate of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this Vehicle.

        Specifies information about the vehicle's license plate number. This information is used to evaluate whether certain vehicle restrictions in environmental zones apply. Currently, only the last character of the license plate can be provided.  Format: `lastCharacter:{character}`  Example: `lastCharacter:2`  **Disclaimer: this parameters are work in progress and functionality is not complete**   # noqa: E501

        :param license_plate: The license_plate of this Vehicle.  # noqa: E501
        :type: str
        """

        self._license_plate = license_plate

    @property
    def speed_cap(self):
        """Gets the speed_cap of this Vehicle.  # noqa: E501

        Specifies the maximum speed, in m/s, which the user wishes not to exceed. This parameter affects route ETA and consumption calculation.  Limitations:   * valid for following transport modes: `car`, `truck`, `scooter`, `taxi`, `bus`, and `privateBus`  Notes:   * Car and Truck mode updates route ETA.   * Scooter mode updates route optimization and ETA.  **Disclaimer: this parameters are work in progress and functionality is not complete**   # noqa: E501

        :return: The speed_cap of this Vehicle.  # noqa: E501
        :rtype: float
        """
        return self._speed_cap

    @speed_cap.setter
    def speed_cap(self, speed_cap):
        """Sets the speed_cap of this Vehicle.

        Specifies the maximum speed, in m/s, which the user wishes not to exceed. This parameter affects route ETA and consumption calculation.  Limitations:   * valid for following transport modes: `car`, `truck`, `scooter`, `taxi`, `bus`, and `privateBus`  Notes:   * Car and Truck mode updates route ETA.   * Scooter mode updates route optimization and ETA.  **Disclaimer: this parameters are work in progress and functionality is not complete**   # noqa: E501

        :param speed_cap: The speed_cap of this Vehicle.  # noqa: E501
        :type: float
        """

        self._speed_cap = speed_cap

    @property
    def type(self):
        """Gets the type of this Vehicle.  # noqa: E501


        :return: The type of this Vehicle.  # noqa: E501
        :rtype: VehicleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Vehicle.


        :param type: The type of this Vehicle.  # noqa: E501
        :type: VehicleType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vehicle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vehicle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
