# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EV(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free_flow_speed_table': 'AllOfEVFreeFlowSpeedTable',
        'traffic_speed_table': 'AllOfEVTrafficSpeedTable',
        'ascent': 'float',
        'descent': 'float',
        'auxiliary_consumption': 'float',
        'initial_charge': 'float',
        'max_charge': 'float',
        'charging_curve': 'str',
        'max_charging_voltage': 'float',
        'max_charging_current': 'float',
        'max_charge_after_charging_station': 'float',
        'min_charge_at_charging_station': 'float',
        'min_charge_at_first_charging_station': 'float',
        'min_charge_at_destination': 'float',
        'charging_setup_duration': 'int',
        'connector_types': 'str',
        'make_reachable': 'bool',
        'preferred_brands': 'str'
    }

    attribute_map = {
        'free_flow_speed_table': 'freeFlowSpeedTable',
        'traffic_speed_table': 'trafficSpeedTable',
        'ascent': 'ascent',
        'descent': 'descent',
        'auxiliary_consumption': 'auxiliaryConsumption',
        'initial_charge': 'initialCharge',
        'max_charge': 'maxCharge',
        'charging_curve': 'chargingCurve',
        'max_charging_voltage': 'maxChargingVoltage',
        'max_charging_current': 'maxChargingCurrent',
        'max_charge_after_charging_station': 'maxChargeAfterChargingStation',
        'min_charge_at_charging_station': 'minChargeAtChargingStation',
        'min_charge_at_first_charging_station': 'minChargeAtFirstChargingStation',
        'min_charge_at_destination': 'minChargeAtDestination',
        'charging_setup_duration': 'chargingSetupDuration',
        'connector_types': 'connectorTypes',
        'make_reachable': 'makeReachable',
        'preferred_brands': 'preferredBrands'
    }

    def __init__(self, free_flow_speed_table=None, traffic_speed_table=None, ascent=None, descent=None, auxiliary_consumption=None, initial_charge=None, max_charge=None, charging_curve=None, max_charging_voltage=None, max_charging_current=None, max_charge_after_charging_station=None, min_charge_at_charging_station=None, min_charge_at_first_charging_station=None, min_charge_at_destination=None, charging_setup_duration=None, connector_types=None, make_reachable=None, preferred_brands=None):  # noqa: E501
        """EV - a model defined in Swagger"""  # noqa: E501
        self._free_flow_speed_table = None
        self._traffic_speed_table = None
        self._ascent = None
        self._descent = None
        self._auxiliary_consumption = None
        self._initial_charge = None
        self._max_charge = None
        self._charging_curve = None
        self._max_charging_voltage = None
        self._max_charging_current = None
        self._max_charge_after_charging_station = None
        self._min_charge_at_charging_station = None
        self._min_charge_at_first_charging_station = None
        self._min_charge_at_destination = None
        self._charging_setup_duration = None
        self._connector_types = None
        self._make_reachable = None
        self._preferred_brands = None
        self.discriminator = None
        self.free_flow_speed_table = free_flow_speed_table
        if traffic_speed_table is not None:
            self.traffic_speed_table = traffic_speed_table
        if ascent is not None:
            self.ascent = ascent
        if descent is not None:
            self.descent = descent
        if auxiliary_consumption is not None:
            self.auxiliary_consumption = auxiliary_consumption
        if initial_charge is not None:
            self.initial_charge = initial_charge
        if max_charge is not None:
            self.max_charge = max_charge
        if charging_curve is not None:
            self.charging_curve = charging_curve
        if max_charging_voltage is not None:
            self.max_charging_voltage = max_charging_voltage
        if max_charging_current is not None:
            self.max_charging_current = max_charging_current
        if max_charge_after_charging_station is not None:
            self.max_charge_after_charging_station = max_charge_after_charging_station
        if min_charge_at_charging_station is not None:
            self.min_charge_at_charging_station = min_charge_at_charging_station
        if min_charge_at_first_charging_station is not None:
            self.min_charge_at_first_charging_station = min_charge_at_first_charging_station
        if min_charge_at_destination is not None:
            self.min_charge_at_destination = min_charge_at_destination
        if charging_setup_duration is not None:
            self.charging_setup_duration = charging_setup_duration
        if connector_types is not None:
            self.connector_types = connector_types
        if make_reachable is not None:
            self.make_reachable = make_reachable
        if preferred_brands is not None:
            self.preferred_brands = preferred_brands

    @property
    def free_flow_speed_table(self):
        """Gets the free_flow_speed_table of this EV.  # noqa: E501


        :return: The free_flow_speed_table of this EV.  # noqa: E501
        :rtype: AllOfEVFreeFlowSpeedTable
        """
        return self._free_flow_speed_table

    @free_flow_speed_table.setter
    def free_flow_speed_table(self, free_flow_speed_table):
        """Sets the free_flow_speed_table of this EV.


        :param free_flow_speed_table: The free_flow_speed_table of this EV.  # noqa: E501
        :type: AllOfEVFreeFlowSpeedTable
        """
        if free_flow_speed_table is None:
            raise ValueError("Invalid value for `free_flow_speed_table`, must not be `None`")  # noqa: E501

        self._free_flow_speed_table = free_flow_speed_table

    @property
    def traffic_speed_table(self):
        """Gets the traffic_speed_table of this EV.  # noqa: E501

        Function curve specifying consumption rate at a given traffic-reduced speed on a flat stretch of road.  See `freeFlowSpeedTable` for a description of the string format.   # noqa: E501

        :return: The traffic_speed_table of this EV.  # noqa: E501
        :rtype: AllOfEVTrafficSpeedTable
        """
        return self._traffic_speed_table

    @traffic_speed_table.setter
    def traffic_speed_table(self, traffic_speed_table):
        """Sets the traffic_speed_table of this EV.

        Function curve specifying consumption rate at a given traffic-reduced speed on a flat stretch of road.  See `freeFlowSpeedTable` for a description of the string format.   # noqa: E501

        :param traffic_speed_table: The traffic_speed_table of this EV.  # noqa: E501
        :type: AllOfEVTrafficSpeedTable
        """

        self._traffic_speed_table = traffic_speed_table

    @property
    def ascent(self):
        """Gets the ascent of this EV.  # noqa: E501

        Rate of energy consumed per meter rise in elevation (in Wh/m, i.e., Watt-hours per meter).   # noqa: E501

        :return: The ascent of this EV.  # noqa: E501
        :rtype: float
        """
        return self._ascent

    @ascent.setter
    def ascent(self, ascent):
        """Sets the ascent of this EV.

        Rate of energy consumed per meter rise in elevation (in Wh/m, i.e., Watt-hours per meter).   # noqa: E501

        :param ascent: The ascent of this EV.  # noqa: E501
        :type: float
        """

        self._ascent = ascent

    @property
    def descent(self):
        """Gets the descent of this EV.  # noqa: E501

        Rate of energy recovered per meter fall in elevation (in Wh/m, i.e., Watt-hours per meter).   # noqa: E501

        :return: The descent of this EV.  # noqa: E501
        :rtype: float
        """
        return self._descent

    @descent.setter
    def descent(self, descent):
        """Sets the descent of this EV.

        Rate of energy recovered per meter fall in elevation (in Wh/m, i.e., Watt-hours per meter).   # noqa: E501

        :param descent: The descent of this EV.  # noqa: E501
        :type: float
        """

        self._descent = descent

    @property
    def auxiliary_consumption(self):
        """Gets the auxiliary_consumption of this EV.  # noqa: E501

        Rate of energy (in Wh/s) consumed by the vehicle's auxiliary systems (for example, air conditioning, lights). The value represents the number of Watt-hours consumed per second of travel.   # noqa: E501

        :return: The auxiliary_consumption of this EV.  # noqa: E501
        :rtype: float
        """
        return self._auxiliary_consumption

    @auxiliary_consumption.setter
    def auxiliary_consumption(self, auxiliary_consumption):
        """Sets the auxiliary_consumption of this EV.

        Rate of energy (in Wh/s) consumed by the vehicle's auxiliary systems (for example, air conditioning, lights). The value represents the number of Watt-hours consumed per second of travel.   # noqa: E501

        :param auxiliary_consumption: The auxiliary_consumption of this EV.  # noqa: E501
        :type: float
        """

        self._auxiliary_consumption = auxiliary_consumption

    @property
    def initial_charge(self):
        """Gets the initial_charge of this EV.  # noqa: E501

        Charge level of the vehicle's battery at the start of the route (in kWh). Value must be less than or equal to the value of `maxCharge`.   # noqa: E501

        :return: The initial_charge of this EV.  # noqa: E501
        :rtype: float
        """
        return self._initial_charge

    @initial_charge.setter
    def initial_charge(self, initial_charge):
        """Sets the initial_charge of this EV.

        Charge level of the vehicle's battery at the start of the route (in kWh). Value must be less than or equal to the value of `maxCharge`.   # noqa: E501

        :param initial_charge: The initial_charge of this EV.  # noqa: E501
        :type: float
        """

        self._initial_charge = initial_charge

    @property
    def max_charge(self):
        """Gets the max_charge of this EV.  # noqa: E501

        Total capacity of the vehicle's battery (in kWh).   # noqa: E501

        :return: The max_charge of this EV.  # noqa: E501
        :rtype: float
        """
        return self._max_charge

    @max_charge.setter
    def max_charge(self, max_charge):
        """Sets the max_charge of this EV.

        Total capacity of the vehicle's battery (in kWh).   # noqa: E501

        :param max_charge: The max_charge of this EV.  # noqa: E501
        :type: float
        """

        self._max_charge = max_charge

    @property
    def charging_curve(self):
        """Gets the charging_curve of this EV.  # noqa: E501

        Function curve describing the maximum battery charging rate (in kW) at a given charge level (in kWh).  The format of the string is a comma-separated list of numbers, as follows:  ``` <CHARGE_0>,<RATE_0>,<CHARGE_1>,<RATE_1>,...,<RATE_N>,<CHARGE_N> ```  where charge values are strictly increasing, non-negative floating-point values in units of (kWh), and rate values are positive floating point values in units of (kW).  Charge values must cover the entire range of `[0, maxChargeAfterChargingStation`]. The charging curve is piecewise constant, e.g., for any charge in the range `[CHARGE_0, CHARGE_1)`, the value of the function is `RATE_0`.  The algorithm calculates a route as the best possible combination of driving and charging parts and uses the charging curve to evaluate the most efficent range of charging. For example, if the rate of charging is high at lower levels of battery, but slows down significantly after charging a little, stopping often and charging less, but quicker, at each station might be better for the overall route. Because batteries lose charging speed with use, providing a charging curve for the exact battery would give more accurate charging time estimate than providing a generic curve for all batteries of one type.   # noqa: E501

        :return: The charging_curve of this EV.  # noqa: E501
        :rtype: str
        """
        return self._charging_curve

    @charging_curve.setter
    def charging_curve(self, charging_curve):
        """Sets the charging_curve of this EV.

        Function curve describing the maximum battery charging rate (in kW) at a given charge level (in kWh).  The format of the string is a comma-separated list of numbers, as follows:  ``` <CHARGE_0>,<RATE_0>,<CHARGE_1>,<RATE_1>,...,<RATE_N>,<CHARGE_N> ```  where charge values are strictly increasing, non-negative floating-point values in units of (kWh), and rate values are positive floating point values in units of (kW).  Charge values must cover the entire range of `[0, maxChargeAfterChargingStation`]. The charging curve is piecewise constant, e.g., for any charge in the range `[CHARGE_0, CHARGE_1)`, the value of the function is `RATE_0`.  The algorithm calculates a route as the best possible combination of driving and charging parts and uses the charging curve to evaluate the most efficent range of charging. For example, if the rate of charging is high at lower levels of battery, but slows down significantly after charging a little, stopping often and charging less, but quicker, at each station might be better for the overall route. Because batteries lose charging speed with use, providing a charging curve for the exact battery would give more accurate charging time estimate than providing a generic curve for all batteries of one type.   # noqa: E501

        :param charging_curve: The charging_curve of this EV.  # noqa: E501
        :type: str
        """

        self._charging_curve = charging_curve

    @property
    def max_charging_voltage(self):
        """Gets the max_charging_voltage of this EV.  # noqa: E501

        Maximum charging voltage supported by the vehicle's battery (in Volt).   # noqa: E501

        :return: The max_charging_voltage of this EV.  # noqa: E501
        :rtype: float
        """
        return self._max_charging_voltage

    @max_charging_voltage.setter
    def max_charging_voltage(self, max_charging_voltage):
        """Sets the max_charging_voltage of this EV.

        Maximum charging voltage supported by the vehicle's battery (in Volt).   # noqa: E501

        :param max_charging_voltage: The max_charging_voltage of this EV.  # noqa: E501
        :type: float
        """

        self._max_charging_voltage = max_charging_voltage

    @property
    def max_charging_current(self):
        """Gets the max_charging_current of this EV.  # noqa: E501

        Maximum charging current supported by the vehicle's battery (in Ampere).   # noqa: E501

        :return: The max_charging_current of this EV.  # noqa: E501
        :rtype: float
        """
        return self._max_charging_current

    @max_charging_current.setter
    def max_charging_current(self, max_charging_current):
        """Sets the max_charging_current of this EV.

        Maximum charging current supported by the vehicle's battery (in Ampere).   # noqa: E501

        :param max_charging_current: The max_charging_current of this EV.  # noqa: E501
        :type: float
        """

        self._max_charging_current = max_charging_current

    @property
    def max_charge_after_charging_station(self):
        """Gets the max_charge_after_charging_station of this EV.  # noqa: E501

        Maximum charge to which the battery should be charged at a charging station (in kWh). Value must be less than or equal to the value of `maxCharge`.  The algorithm calculates a route as the best possible combination of driving and charging parts so charging at a charging station does not happen strictly to the value of this parameter. Instead, the algorithm attempts to leave every station with different charge levels, and only the best possible combination of charging stations and target charge will form the final route.  For example, if there is a fast but not reachable charging station on the route, the algorithm prefers first to charge at a slower station, but only to a level that enables it to reach the fast station. This way it calculates the best possible combination of driving and charging parts.   # noqa: E501

        :return: The max_charge_after_charging_station of this EV.  # noqa: E501
        :rtype: float
        """
        return self._max_charge_after_charging_station

    @max_charge_after_charging_station.setter
    def max_charge_after_charging_station(self, max_charge_after_charging_station):
        """Sets the max_charge_after_charging_station of this EV.

        Maximum charge to which the battery should be charged at a charging station (in kWh). Value must be less than or equal to the value of `maxCharge`.  The algorithm calculates a route as the best possible combination of driving and charging parts so charging at a charging station does not happen strictly to the value of this parameter. Instead, the algorithm attempts to leave every station with different charge levels, and only the best possible combination of charging stations and target charge will form the final route.  For example, if there is a fast but not reachable charging station on the route, the algorithm prefers first to charge at a slower station, but only to a level that enables it to reach the fast station. This way it calculates the best possible combination of driving and charging parts.   # noqa: E501

        :param max_charge_after_charging_station: The max_charge_after_charging_station of this EV.  # noqa: E501
        :type: float
        """

        self._max_charge_after_charging_station = max_charge_after_charging_station

    @property
    def min_charge_at_charging_station(self):
        """Gets the min_charge_at_charging_station of this EV.  # noqa: E501

        Minimum charge when arriving at a charging station (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`.  The algorithm calculates a route as the best possible combination of driving and charging parts so visiting a charging station is planned not when the remaining charge is close to the value of this parameter but when it is part of the best possible charging plan for the given route.  For example, it might prefer charging a still half-full battery at the fast charging station because there are only slower stations later on the route and the remaining charge is not enough to reach the destination without charging at all.   # noqa: E501

        :return: The min_charge_at_charging_station of this EV.  # noqa: E501
        :rtype: float
        """
        return self._min_charge_at_charging_station

    @min_charge_at_charging_station.setter
    def min_charge_at_charging_station(self, min_charge_at_charging_station):
        """Sets the min_charge_at_charging_station of this EV.

        Minimum charge when arriving at a charging station (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`.  The algorithm calculates a route as the best possible combination of driving and charging parts so visiting a charging station is planned not when the remaining charge is close to the value of this parameter but when it is part of the best possible charging plan for the given route.  For example, it might prefer charging a still half-full battery at the fast charging station because there are only slower stations later on the route and the remaining charge is not enough to reach the destination without charging at all.   # noqa: E501

        :param min_charge_at_charging_station: The min_charge_at_charging_station of this EV.  # noqa: E501
        :type: float
        """

        self._min_charge_at_charging_station = min_charge_at_charging_station

    @property
    def min_charge_at_first_charging_station(self):
        """Gets the min_charge_at_first_charging_station of this EV.  # noqa: E501

        Minimum charge when arriving at first charging station (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`.  This overrides `minChargeAtChargingStation` for the first charging station. If not specified, `minChargeAtChargingStation` will be used for all charging stations, including the first one.  This is usually used when the current charge is too low to reach a charging station within `minChargeAtChargingStation` limits.   # noqa: E501

        :return: The min_charge_at_first_charging_station of this EV.  # noqa: E501
        :rtype: float
        """
        return self._min_charge_at_first_charging_station

    @min_charge_at_first_charging_station.setter
    def min_charge_at_first_charging_station(self, min_charge_at_first_charging_station):
        """Sets the min_charge_at_first_charging_station of this EV.

        Minimum charge when arriving at first charging station (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`.  This overrides `minChargeAtChargingStation` for the first charging station. If not specified, `minChargeAtChargingStation` will be used for all charging stations, including the first one.  This is usually used when the current charge is too low to reach a charging station within `minChargeAtChargingStation` limits.   # noqa: E501

        :param min_charge_at_first_charging_station: The min_charge_at_first_charging_station of this EV.  # noqa: E501
        :type: float
        """

        self._min_charge_at_first_charging_station = min_charge_at_first_charging_station

    @property
    def min_charge_at_destination(self):
        """Gets the min_charge_at_destination of this EV.  # noqa: E501

        Minimum charge at the final route destination (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`.  The algorithm calculates a route as the best possible combination of driving and charging parts while making sure that the actual value of the charge at the destination would be close to the value of this parameter. I.e., the resulting value is expected to be bigger than this parameter's value by no more than 10% of the battery capacity.   # noqa: E501

        :return: The min_charge_at_destination of this EV.  # noqa: E501
        :rtype: float
        """
        return self._min_charge_at_destination

    @min_charge_at_destination.setter
    def min_charge_at_destination(self, min_charge_at_destination):
        """Sets the min_charge_at_destination of this EV.

        Minimum charge at the final route destination (in kWh). Value must be less than the value of `maxChargeAfterChargingStation`.  The algorithm calculates a route as the best possible combination of driving and charging parts while making sure that the actual value of the charge at the destination would be close to the value of this parameter. I.e., the resulting value is expected to be bigger than this parameter's value by no more than 10% of the battery capacity.   # noqa: E501

        :param min_charge_at_destination: The min_charge_at_destination of this EV.  # noqa: E501
        :type: float
        """

        self._min_charge_at_destination = min_charge_at_destination

    @property
    def charging_setup_duration(self):
        """Gets the charging_setup_duration of this EV.  # noqa: E501

        Time spent (in seconds) after arriving at a charging station but before actually charging (for example, time spent for payment processing).   # noqa: E501

        :return: The charging_setup_duration of this EV.  # noqa: E501
        :rtype: int
        """
        return self._charging_setup_duration

    @charging_setup_duration.setter
    def charging_setup_duration(self, charging_setup_duration):
        """Sets the charging_setup_duration of this EV.

        Time spent (in seconds) after arriving at a charging station but before actually charging (for example, time spent for payment processing).   # noqa: E501

        :param charging_setup_duration: The charging_setup_duration of this EV.  # noqa: E501
        :type: int
        """

        self._charging_setup_duration = charging_setup_duration

    @property
    def connector_types(self):
        """Gets the connector_types of this EV.  # noqa: E501

        Comma-separated list of connector types that are compatible with the vehicle. If `makeReachable` is set to `true`, then only stations with any of these connector types will be evaluated as a potential charging stop. For stations with multiple compatible connectors, the charging time is based on the connector type with the highest power rating among them.  Currently supported connector types are:   * `iec62196Type1Combo`:  Type 1 Combo connector, commonly called \"SAE J1772\"   * `iec62196Type2Combo`:  Type 2 Combo connector, commonly called \"Mennekes\"   * `chademo`: CHAdeMO connector   * `tesla`: Tesla connector   # noqa: E501

        :return: The connector_types of this EV.  # noqa: E501
        :rtype: str
        """
        return self._connector_types

    @connector_types.setter
    def connector_types(self, connector_types):
        """Sets the connector_types of this EV.

        Comma-separated list of connector types that are compatible with the vehicle. If `makeReachable` is set to `true`, then only stations with any of these connector types will be evaluated as a potential charging stop. For stations with multiple compatible connectors, the charging time is based on the connector type with the highest power rating among them.  Currently supported connector types are:   * `iec62196Type1Combo`:  Type 1 Combo connector, commonly called \"SAE J1772\"   * `iec62196Type2Combo`:  Type 2 Combo connector, commonly called \"Mennekes\"   * `chademo`: CHAdeMO connector   * `tesla`: Tesla connector   # noqa: E501

        :param connector_types: The connector_types of this EV.  # noqa: E501
        :type: str
        """

        self._connector_types = connector_types

    @property
    def make_reachable(self):
        """Gets the make_reachable of this EV.  # noqa: E501

        When set to `true`, the router ensures that the calculated route is reachable within the given constraints (i.e., `minChargeAtChargingStation`, `minChargeAtDestination`). If necessary, charging stations are added to the route to achieve reachability.  The following conditions must be met in order to enable this option: * `transportMode=car` * `routingMode=fast` * `avoid` options requested, if any, should only be from `tollRoad`, `ferry`, `controlledAccessHighway`, `carShuttleTrain`, `tunnel`, `dirtRoad`. Avoid `controlledAccessHighway` and `tollRoad` options are limited to 300km air distance between 2 subsequent waypoints.   # noqa: E501

        :return: The make_reachable of this EV.  # noqa: E501
        :rtype: bool
        """
        return self._make_reachable

    @make_reachable.setter
    def make_reachable(self, make_reachable):
        """Sets the make_reachable of this EV.

        When set to `true`, the router ensures that the calculated route is reachable within the given constraints (i.e., `minChargeAtChargingStation`, `minChargeAtDestination`). If necessary, charging stations are added to the route to achieve reachability.  The following conditions must be met in order to enable this option: * `transportMode=car` * `routingMode=fast` * `avoid` options requested, if any, should only be from `tollRoad`, `ferry`, `controlledAccessHighway`, `carShuttleTrain`, `tunnel`, `dirtRoad`. Avoid `controlledAccessHighway` and `tollRoad` options are limited to 300km air distance between 2 subsequent waypoints.   # noqa: E501

        :param make_reachable: The make_reachable of this EV.  # noqa: E501
        :type: bool
        """

        self._make_reachable = make_reachable

    @property
    def preferred_brands(self):
        """Gets the preferred_brands of this EV.  # noqa: E501

        Comma-separated list of charging station brand IDs. If `makeReachable` is set to `true`, then charging stations from the specified brands will be preferred as potential charging stops, even if this makes the total route duration (travel time plus charging time) longer (up to 15 minutes per charging stop).   # noqa: E501

        :return: The preferred_brands of this EV.  # noqa: E501
        :rtype: str
        """
        return self._preferred_brands

    @preferred_brands.setter
    def preferred_brands(self, preferred_brands):
        """Sets the preferred_brands of this EV.

        Comma-separated list of charging station brand IDs. If `makeReachable` is set to `true`, then charging stations from the specified brands will be preferred as potential charging stops, even if this makes the total route duration (travel time plus charging time) longer (up to 15 minutes per charging stop).   # noqa: E501

        :param preferred_brands: The preferred_brands of this EV.  # noqa: E501
        :type: str
        """

        self._preferred_brands = preferred_brands

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EV, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EV):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
