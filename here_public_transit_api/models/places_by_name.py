# coding: utf-8

"""
    Public Transit API

    Public Transit is a set of three REST APIs that provides public transit routing information and public transit stations information available within an area or for a given station.   # noqa: E501

    OpenAPI spec version: 8.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlacesByName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'method': 'str',
        'max_places': 'int',
        '_in': 'InCircle',
        'modes_in_place': 'str'
    }

    attribute_map = {
        'name': 'name',
        'method': 'method',
        'max_places': 'maxPlaces',
        '_in': 'in',
        'modes_in_place': 'modesInPlace'
    }

    def __init__(self, name=None, method=None, max_places=5, _in=None, modes_in_place=None):  # noqa: E501
        """PlacesByName - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._method = None
        self._max_places = None
        self.__in = None
        self._modes_in_place = None
        self.discriminator = None
        self.name = name
        if method is not None:
            self.method = method
        if max_places is not None:
            self.max_places = max_places
        self._in = _in
        if modes_in_place is not None:
            self.modes_in_place = modes_in_place

    @property
    def name(self):
        """Gets the name of this PlacesByName.  # noqa: E501

        The station name or part of the name to search for. It is composed of one or more space separated words.   # noqa: E501

        :return: The name of this PlacesByName.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlacesByName.

        The station name or part of the name to search for. It is composed of one or more space separated words.   # noqa: E501

        :param name: The name of this PlacesByName.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def method(self):
        """Gets the method of this PlacesByName.  # noqa: E501

        Specifies if the match is `fuzzy` or `strict`. The default value is fuzzy.  `fuzzy` - search for a station with the name similar to one of the names requested `strict` - search for a station with the name exactly matching one of the names requested or containing it as a part  For example, if the station name in the request is \"maurer\", then if the method is `fuzzy` the response contains \"AMBOY AVE AT MAURER RD\" and \"LAUREL HILL BL/48 ST\". If the method is `strict` the response contains \"AMBOY AVE AT MAURER RD\" but not \"LAUREL HILL BL/48 ST\".   # noqa: E501

        :return: The method of this PlacesByName.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PlacesByName.

        Specifies if the match is `fuzzy` or `strict`. The default value is fuzzy.  `fuzzy` - search for a station with the name similar to one of the names requested `strict` - search for a station with the name exactly matching one of the names requested or containing it as a part  For example, if the station name in the request is \"maurer\", then if the method is `fuzzy` the response contains \"AMBOY AVE AT MAURER RD\" and \"LAUREL HILL BL/48 ST\". If the method is `strict` the response contains \"AMBOY AVE AT MAURER RD\" but not \"LAUREL HILL BL/48 ST\".   # noqa: E501

        :param method: The method of this PlacesByName.  # noqa: E501
        :type: str
        """
        allowed_values = ["fuzzy", "strict"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def max_places(self):
        """Gets the max_places of this PlacesByName.  # noqa: E501

        The maximum number of stations/stops included in the response.  # noqa: E501

        :return: The max_places of this PlacesByName.  # noqa: E501
        :rtype: int
        """
        return self._max_places

    @max_places.setter
    def max_places(self, max_places):
        """Sets the max_places of this PlacesByName.

        The maximum number of stations/stops included in the response.  # noqa: E501

        :param max_places: The max_places of this PlacesByName.  # noqa: E501
        :type: int
        """

        self._max_places = max_places

    @property
    def _in(self):
        """Gets the _in of this PlacesByName.  # noqa: E501


        :return: The _in of this PlacesByName.  # noqa: E501
        :rtype: InCircle
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this PlacesByName.


        :param _in: The _in of this PlacesByName.  # noqa: E501
        :type: InCircle
        """
        if _in is None:
            raise ValueError("Invalid value for `_in`, must not be `None`")  # noqa: E501

        self.__in = _in

    @property
    def modes_in_place(self):
        """Gets the modes_in_place of this PlacesByName.  # noqa: E501

        Format: `mode1,mode2,...`  Filter the list of stations returned in the response depending on the Transit modes available.  Stations where at least one of the specified modes exists will get returned. By default, all supported transit modes are permitted.  Supported modes: `highSpeedTrain` `intercityTrain` `interRegionalTrain` `regionalTrain` `cityTrain` `bus` `ferry` `subway` `lightRail` `privateBus` `inclined` `aerial` `busRapid` `monorail` `flight` `spaceship`  This parameter also support an exclusion list: It's sufficient to specify each mode to exclude by prefixing it with `-`. Mixing of inclusive and exclusive transit modes is not allowed.  examples:   * `subway,bus`. Returns only stations having subways and busses.   * `-subway,-bus`. Returns all stations except the one having just subways or busses.   # noqa: E501

        :return: The modes_in_place of this PlacesByName.  # noqa: E501
        :rtype: str
        """
        return self._modes_in_place

    @modes_in_place.setter
    def modes_in_place(self, modes_in_place):
        """Sets the modes_in_place of this PlacesByName.

        Format: `mode1,mode2,...`  Filter the list of stations returned in the response depending on the Transit modes available.  Stations where at least one of the specified modes exists will get returned. By default, all supported transit modes are permitted.  Supported modes: `highSpeedTrain` `intercityTrain` `interRegionalTrain` `regionalTrain` `cityTrain` `bus` `ferry` `subway` `lightRail` `privateBus` `inclined` `aerial` `busRapid` `monorail` `flight` `spaceship`  This parameter also support an exclusion list: It's sufficient to specify each mode to exclude by prefixing it with `-`. Mixing of inclusive and exclusive transit modes is not allowed.  examples:   * `subway,bus`. Returns only stations having subways and busses.   * `-subway,-bus`. Returns all stations except the one having just subways or busses.   # noqa: E501

        :param modes_in_place: The modes_in_place of this PlacesByName.  # noqa: E501
        :type: str
        """

        self._modes_in_place = modes_in_place

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlacesByName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacesByName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
