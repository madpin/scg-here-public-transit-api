# coding: utf-8

"""
    Public Transit API

    Public Transit is a set of three REST APIs that provides public transit routing information and public transit stations information available within an area or for a given station.   # noqa: E501

    OpenAPI spec version: 8.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChargingStationPlace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'waypoint': 'int',
        'type': 'str',
        'location': 'AllOfChargingStationPlaceLocation',
        'original_location': 'AllOfChargingStationPlaceOriginalLocation',
        'id': 'str',
        'connector_attributes': 'ChargingConnectorAttributes',
        'brand': 'ChargingStationBrand'
    }

    attribute_map = {
        'name': 'name',
        'waypoint': 'waypoint',
        'type': 'type',
        'location': 'location',
        'original_location': 'originalLocation',
        'id': 'id',
        'connector_attributes': 'connectorAttributes',
        'brand': 'brand'
    }

    def __init__(self, name=None, waypoint=None, type=None, location=None, original_location=None, id=None, connector_attributes=None, brand=None):  # noqa: E501
        """ChargingStationPlace - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._waypoint = None
        self._type = None
        self._location = None
        self._original_location = None
        self._id = None
        self._connector_attributes = None
        self._brand = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if waypoint is not None:
            self.waypoint = waypoint
        self.type = type
        self.location = location
        if original_location is not None:
            self.original_location = original_location
        if id is not None:
            self.id = id
        if connector_attributes is not None:
            self.connector_attributes = connector_attributes
        if brand is not None:
            self.brand = brand

    @property
    def name(self):
        """Gets the name of this ChargingStationPlace.  # noqa: E501

        Human readable name of this charging station  # noqa: E501

        :return: The name of this ChargingStationPlace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChargingStationPlace.

        Human readable name of this charging station  # noqa: E501

        :param name: The name of this ChargingStationPlace.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def waypoint(self):
        """Gets the waypoint of this ChargingStationPlace.  # noqa: E501

        If present, this place corresponds to the waypoint in the request with the same index.  # noqa: E501

        :return: The waypoint of this ChargingStationPlace.  # noqa: E501
        :rtype: int
        """
        return self._waypoint

    @waypoint.setter
    def waypoint(self, waypoint):
        """Sets the waypoint of this ChargingStationPlace.

        If present, this place corresponds to the waypoint in the request with the same index.  # noqa: E501

        :param waypoint: The waypoint of this ChargingStationPlace.  # noqa: E501
        :type: int
        """

        self._waypoint = waypoint

    @property
    def type(self):
        """Gets the type of this ChargingStationPlace.  # noqa: E501

        Place type. Each place type can have extra attributes.  **NOTE:** The list of possible place types could be extended in the future. The client application is expected to handle such a case gracefully.   # noqa: E501

        :return: The type of this ChargingStationPlace.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChargingStationPlace.

        Place type. Each place type can have extra attributes.  **NOTE:** The list of possible place types could be extended in the future. The client application is expected to handle such a case gracefully.   # noqa: E501

        :param type: The type of this ChargingStationPlace.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def location(self):
        """Gets the location of this ChargingStationPlace.  # noqa: E501

        The position of this location  This position was used in route calculation. It may be different to the original position provided in the request.   # noqa: E501

        :return: The location of this ChargingStationPlace.  # noqa: E501
        :rtype: AllOfChargingStationPlaceLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ChargingStationPlace.

        The position of this location  This position was used in route calculation. It may be different to the original position provided in the request.   # noqa: E501

        :param location: The location of this ChargingStationPlace.  # noqa: E501
        :type: AllOfChargingStationPlaceLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def original_location(self):
        """Gets the original_location of this ChargingStationPlace.  # noqa: E501

        If present, the original position of this location provided in the request.  # noqa: E501

        :return: The original_location of this ChargingStationPlace.  # noqa: E501
        :rtype: AllOfChargingStationPlaceOriginalLocation
        """
        return self._original_location

    @original_location.setter
    def original_location(self, original_location):
        """Sets the original_location of this ChargingStationPlace.

        If present, the original position of this location provided in the request.  # noqa: E501

        :param original_location: The original_location of this ChargingStationPlace.  # noqa: E501
        :type: AllOfChargingStationPlaceOriginalLocation
        """

        self._original_location = original_location

    @property
    def id(self):
        """Gets the id of this ChargingStationPlace.  # noqa: E501

        Identifier of this charging station  # noqa: E501

        :return: The id of this ChargingStationPlace.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChargingStationPlace.

        Identifier of this charging station  # noqa: E501

        :param id: The id of this ChargingStationPlace.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def connector_attributes(self):
        """Gets the connector_attributes of this ChargingStationPlace.  # noqa: E501


        :return: The connector_attributes of this ChargingStationPlace.  # noqa: E501
        :rtype: ChargingConnectorAttributes
        """
        return self._connector_attributes

    @connector_attributes.setter
    def connector_attributes(self, connector_attributes):
        """Sets the connector_attributes of this ChargingStationPlace.


        :param connector_attributes: The connector_attributes of this ChargingStationPlace.  # noqa: E501
        :type: ChargingConnectorAttributes
        """

        self._connector_attributes = connector_attributes

    @property
    def brand(self):
        """Gets the brand of this ChargingStationPlace.  # noqa: E501


        :return: The brand of this ChargingStationPlace.  # noqa: E501
        :rtype: ChargingStationBrand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ChargingStationPlace.


        :param brand: The brand of this ChargingStationPlace.  # noqa: E501
        :type: ChargingStationBrand
        """

        self._brand = brand

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChargingStationPlace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargingStationPlace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
