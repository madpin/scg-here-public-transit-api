# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AvoidPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segments': 'list[str]'
    }

    attribute_map = {
        'segments': 'segments'
    }

    def __init__(self, segments=None):  # noqa: E501
        """AvoidPost - a model defined in Swagger"""  # noqa: E501
        self._segments = None
        self.discriminator = None
        if segments is not None:
            self.segments = segments

    @property
    def segments(self):
        """Gets the segments of this AvoidPost.  # noqa: E501

        An array of segment identifiers that routes will avoid going through.  Each entry has the following structure: `{segmentId}(#{direction})?`  The individual parts are: * segmentId: The identifier of the referenced topology segment inside the catalog, example: `here:cm:segment:207551710` * direction (optional): Either '*' for bidirectional (default), '+' for positive direction, or '-' for negative direction  Example of a parameter value excluding two segments: `[\"here:cm:segment:207551710#+\", \"here:cm:segment:76771992#*\"]`  **Note**: Maximum amount of penalized segments in one request should not be grater than 250.           A \"penalized segments\" refers to segments that have a restrictions on maximum baseSpeed with `maxSpeedOnSegment`           or avoided with `avoid[segments]`   # noqa: E501

        :return: The segments of this AvoidPost.  # noqa: E501
        :rtype: list[str]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this AvoidPost.

        An array of segment identifiers that routes will avoid going through.  Each entry has the following structure: `{segmentId}(#{direction})?`  The individual parts are: * segmentId: The identifier of the referenced topology segment inside the catalog, example: `here:cm:segment:207551710` * direction (optional): Either '*' for bidirectional (default), '+' for positive direction, or '-' for negative direction  Example of a parameter value excluding two segments: `[\"here:cm:segment:207551710#+\", \"here:cm:segment:76771992#*\"]`  **Note**: Maximum amount of penalized segments in one request should not be grater than 250.           A \"penalized segments\" refers to segments that have a restrictions on maximum baseSpeed with `maxSpeedOnSegment`           or avoided with `avoid[segments]`   # noqa: E501

        :param segments: The segments of this AvoidPost.  # noqa: E501
        :type: list[str]
        """

        self._segments = segments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvoidPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvoidPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
