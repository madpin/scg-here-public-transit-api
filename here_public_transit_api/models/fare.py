# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Fare(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'price': 'FarePrice',
        'converted_price': 'FarePrice',
        'reason': 'FareReason',
        'payment_methods': 'list[PaymentMethod]',
        '_pass': 'FarePass'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'price': 'price',
        'converted_price': 'convertedPrice',
        'reason': 'reason',
        'payment_methods': 'paymentMethods',
        '_pass': 'pass'
    }

    def __init__(self, id=None, name=None, price=None, converted_price=None, reason=None, payment_methods=None, _pass=None):  # noqa: E501
        """Fare - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._price = None
        self._converted_price = None
        self._reason = None
        self._payment_methods = None
        self.__pass = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.price = price
        if converted_price is not None:
            self.converted_price = converted_price
        if reason is not None:
            self.reason = reason
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if _pass is not None:
            self._pass = _pass

    @property
    def id(self):
        """Gets the id of this Fare.  # noqa: E501

        Unique Fare id. Used to deduplicate fares that apply to multiple sections  # noqa: E501

        :return: The id of this Fare.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Fare.

        Unique Fare id. Used to deduplicate fares that apply to multiple sections  # noqa: E501

        :param id: The id of this Fare.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Fare.  # noqa: E501

        Name of a fare  # noqa: E501

        :return: The name of this Fare.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Fare.

        Name of a fare  # noqa: E501

        :param name: The name of this Fare.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def price(self):
        """Gets the price of this Fare.  # noqa: E501


        :return: The price of this Fare.  # noqa: E501
        :rtype: FarePrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Fare.


        :param price: The price of this Fare.  # noqa: E501
        :type: FarePrice
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def converted_price(self):
        """Gets the converted_price of this Fare.  # noqa: E501


        :return: The converted_price of this Fare.  # noqa: E501
        :rtype: FarePrice
        """
        return self._converted_price

    @converted_price.setter
    def converted_price(self, converted_price):
        """Sets the converted_price of this Fare.


        :param converted_price: The converted_price of this Fare.  # noqa: E501
        :type: FarePrice
        """

        self._converted_price = converted_price

    @property
    def reason(self):
        """Gets the reason of this Fare.  # noqa: E501


        :return: The reason of this Fare.  # noqa: E501
        :rtype: FareReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Fare.


        :param reason: The reason of this Fare.  # noqa: E501
        :type: FareReason
        """

        self._reason = reason

    @property
    def payment_methods(self):
        """Gets the payment_methods of this Fare.  # noqa: E501

        Specifies the payment methods for which this fare is valid.   # noqa: E501

        :return: The payment_methods of this Fare.  # noqa: E501
        :rtype: list[PaymentMethod]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this Fare.

        Specifies the payment methods for which this fare is valid.   # noqa: E501

        :param payment_methods: The payment_methods of this Fare.  # noqa: E501
        :type: list[PaymentMethod]
        """

        self._payment_methods = payment_methods

    @property
    def _pass(self):
        """Gets the _pass of this Fare.  # noqa: E501


        :return: The _pass of this Fare.  # noqa: E501
        :rtype: FarePass
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this Fare.


        :param _pass: The _pass of this Fare.  # noqa: E501
        :type: FarePass
        """

        self.__pass = _pass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fare, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fare):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
