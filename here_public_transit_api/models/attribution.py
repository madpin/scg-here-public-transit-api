# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Attribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'Uri',
        'text': 'str',
        'href_text': 'str',
        'type': 'AttributionLinkType'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'text': 'text',
        'href_text': 'hrefText',
        'type': 'type'
    }

    def __init__(self, id=None, href=None, text=None, href_text=None, type=None):  # noqa: E501
        """Attribution - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._text = None
        self._href_text = None
        self._type = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        self.text = text
        if href_text is not None:
            self.href_text = href_text
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this Attribution.  # noqa: E501

        Unique identifier for the web link. It is used to deduplicate links defined in multiple sections.  # noqa: E501

        :return: The id of this Attribution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attribution.

        Unique identifier for the web link. It is used to deduplicate links defined in multiple sections.  # noqa: E501

        :param id: The id of this Attribution.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this Attribution.  # noqa: E501


        :return: The href of this Attribution.  # noqa: E501
        :rtype: Uri
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Attribution.


        :param href: The href of this Attribution.  # noqa: E501
        :type: Uri
        """

        self._href = href

    @property
    def text(self):
        """Gets the text of this Attribution.  # noqa: E501

        Text describing the url address (e.g. The example website).  # noqa: E501

        :return: The text of this Attribution.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Attribution.

        Text describing the url address (e.g. The example website).  # noqa: E501

        :param text: The text of this Attribution.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def href_text(self):
        """Gets the href_text of this Attribution.  # noqa: E501

        The interactive (or clickable) portion of the text. If not present (default), the entire content of the text attribute will be considered.   # noqa: E501

        :return: The href_text of this Attribution.  # noqa: E501
        :rtype: str
        """
        return self._href_text

    @href_text.setter
    def href_text(self, href_text):
        """Sets the href_text of this Attribution.

        The interactive (or clickable) portion of the text. If not present (default), the entire content of the text attribute will be considered.   # noqa: E501

        :param href_text: The href_text of this Attribution.  # noqa: E501
        :type: str
        """

        self._href_text = href_text

    @property
    def type(self):
        """Gets the type of this Attribution.  # noqa: E501


        :return: The type of this Attribution.  # noqa: E501
        :rtype: AttributionLinkType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Attribution.


        :param type: The type of this Attribution.  # noqa: E501
        :type: AttributionLinkType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Attribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
