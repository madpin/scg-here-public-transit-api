# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Rerouting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'ReroutingMode',
        'last_traveled_section_index': 'int',
        'traveled_distance_on_last_section': 'int'
    }

    attribute_map = {
        'mode': 'mode',
        'last_traveled_section_index': 'lastTraveledSectionIndex',
        'traveled_distance_on_last_section': 'traveledDistanceOnLastSection'
    }

    def __init__(self, mode=None, last_traveled_section_index=0, traveled_distance_on_last_section=0):  # noqa: E501
        """Rerouting - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._last_traveled_section_index = None
        self._traveled_distance_on_last_section = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if last_traveled_section_index is not None:
            self.last_traveled_section_index = last_traveled_section_index
        if traveled_distance_on_last_section is not None:
            self.traveled_distance_on_last_section = traveled_distance_on_last_section

    @property
    def mode(self):
        """Gets the mode of this Rerouting.  # noqa: E501


        :return: The mode of this Rerouting.  # noqa: E501
        :rtype: ReroutingMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Rerouting.


        :param mode: The mode of this Rerouting.  # noqa: E501
        :type: ReroutingMode
        """

        self._mode = mode

    @property
    def last_traveled_section_index(self):
        """Gets the last_traveled_section_index of this Rerouting.  # noqa: E501

        Indicates the index of the last traveled route section. Traveled part of the route won't be reused.   # noqa: E501

        :return: The last_traveled_section_index of this Rerouting.  # noqa: E501
        :rtype: int
        """
        return self._last_traveled_section_index

    @last_traveled_section_index.setter
    def last_traveled_section_index(self, last_traveled_section_index):
        """Sets the last_traveled_section_index of this Rerouting.

        Indicates the index of the last traveled route section. Traveled part of the route won't be reused.   # noqa: E501

        :param last_traveled_section_index: The last_traveled_section_index of this Rerouting.  # noqa: E501
        :type: int
        """

        self._last_traveled_section_index = last_traveled_section_index

    @property
    def traveled_distance_on_last_section(self):
        """Gets the traveled_distance_on_last_section of this Rerouting.  # noqa: E501

        Offset in meter to the last visited position on the route section defined by the `lastTraveledSectionIndex`.   # noqa: E501

        :return: The traveled_distance_on_last_section of this Rerouting.  # noqa: E501
        :rtype: int
        """
        return self._traveled_distance_on_last_section

    @traveled_distance_on_last_section.setter
    def traveled_distance_on_last_section(self, traveled_distance_on_last_section):
        """Sets the traveled_distance_on_last_section of this Rerouting.

        Offset in meter to the last visited position on the route section defined by the `lastTraveledSectionIndex`.   # noqa: E501

        :param traveled_distance_on_last_section: The traveled_distance_on_last_section of this Rerouting.  # noqa: E501
        :type: int
        """

        self._traveled_distance_on_last_section = traveled_distance_on_last_section

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rerouting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rerouting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
