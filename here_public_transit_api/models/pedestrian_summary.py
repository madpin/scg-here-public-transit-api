# coding: utf-8

"""
    Public Transit API

    Public Transit is a set of three REST APIs that provides public transit routing information and public transit stations information available within an area or for a given station.   # noqa: E501

    OpenAPI spec version: 8.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PedestrianSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'Duration',
        'length': 'Distance',
        'base_duration': 'AllOfPedestrianSummaryBaseDuration'
    }

    attribute_map = {
        'duration': 'duration',
        'length': 'length',
        'base_duration': 'baseDuration'
    }

    def __init__(self, duration=None, length=None, base_duration=None):  # noqa: E501
        """PedestrianSummary - a model defined in Swagger"""  # noqa: E501
        self._duration = None
        self._length = None
        self._base_duration = None
        self.discriminator = None
        self.duration = duration
        self.length = length
        if base_duration is not None:
            self.base_duration = base_duration

    @property
    def duration(self):
        """Gets the duration of this PedestrianSummary.  # noqa: E501


        :return: The duration of this PedestrianSummary.  # noqa: E501
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PedestrianSummary.


        :param duration: The duration of this PedestrianSummary.  # noqa: E501
        :type: Duration
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def length(self):
        """Gets the length of this PedestrianSummary.  # noqa: E501


        :return: The length of this PedestrianSummary.  # noqa: E501
        :rtype: Distance
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PedestrianSummary.


        :param length: The length of this PedestrianSummary.  # noqa: E501
        :type: Distance
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def base_duration(self):
        """Gets the base_duration of this PedestrianSummary.  # noqa: E501

        Duration (in seconds) ignoring time-aware information.  For pedestrian mode, the reported time is currently equal to that in `duration`.   # noqa: E501

        :return: The base_duration of this PedestrianSummary.  # noqa: E501
        :rtype: AllOfPedestrianSummaryBaseDuration
        """
        return self._base_duration

    @base_duration.setter
    def base_duration(self, base_duration):
        """Sets the base_duration of this PedestrianSummary.

        Duration (in seconds) ignoring time-aware information.  For pedestrian mode, the reported time is currently equal to that in `duration`.   # noqa: E501

        :param base_duration: The base_duration of this PedestrianSummary.  # noqa: E501
        :type: AllOfPedestrianSummaryBaseDuration
        """

        self._base_duration = base_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PedestrianSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PedestrianSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
