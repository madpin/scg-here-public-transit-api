# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoutingZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref': 'str',
        'type': 'str',
        'name': 'str'
    }

    attribute_map = {
        'ref': 'ref',
        'type': 'type',
        'name': 'name'
    }

    def __init__(self, ref=None, type=None, name=None):  # noqa: E501
        """RoutingZone - a model defined in Swagger"""  # noqa: E501
        self._ref = None
        self._type = None
        self._name = None
        self.discriminator = None
        if ref is not None:
            self.ref = ref
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name

    @property
    def ref(self):
        """Gets the ref of this RoutingZone.  # noqa: E501

        A reference to a routing zone in HMC.  The standard representation of a routing zone reference has the following structure: `{catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{zoneId}`  The individual parts are: * `catalogHrn`: The HERE Resource Name that identifies the source catalog of the routing zone, example: `hrn:here:data::olp-here:rib-2` * `catalogVersion`: The catalog version * `layerId` (optional): The layer inside the catalog where the routing zone is located, example: `environmental-zones` * `tileId`: The HERE tile key of the partition/tile where the routing zone is located in the given version of the catalog * `zoneId`: The identifier of the referenced routing zone within the catalog, example: `here:cm:envzone:3455277`  Example of a reference to an environmental zone in standard form: `hrn:here:data::olp-here:rib-2:1557:environmental-zones:all:here:cm:envzone:3455277`  In order to reduce reponse size, routing zone references can also be provided in a compact representation. In compact form, parts of a reference are replaced by placeholders, which can be resolved using the `refReplacements` dictionary in the parent section. The placeholder format is `\\$\\d+` and needs to be surrounded by columns or string start/end. It can be captured with the following regular expression: `(^|:)\\$\\d+(:|$)`  Example of the aforementioned environmental zone reference in compact form: `$0:$1:3455277` With the corresponding `refReplacements`: ``` \"refReplacements\": {   \"0\": \"hrn:here:data::olp-here:rib-2:1557\",   \"1\": \"environmental-zones:all:here:cm:envzone\" } ```   # noqa: E501

        :return: The ref of this RoutingZone.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this RoutingZone.

        A reference to a routing zone in HMC.  The standard representation of a routing zone reference has the following structure: `{catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{zoneId}`  The individual parts are: * `catalogHrn`: The HERE Resource Name that identifies the source catalog of the routing zone, example: `hrn:here:data::olp-here:rib-2` * `catalogVersion`: The catalog version * `layerId` (optional): The layer inside the catalog where the routing zone is located, example: `environmental-zones` * `tileId`: The HERE tile key of the partition/tile where the routing zone is located in the given version of the catalog * `zoneId`: The identifier of the referenced routing zone within the catalog, example: `here:cm:envzone:3455277`  Example of a reference to an environmental zone in standard form: `hrn:here:data::olp-here:rib-2:1557:environmental-zones:all:here:cm:envzone:3455277`  In order to reduce reponse size, routing zone references can also be provided in a compact representation. In compact form, parts of a reference are replaced by placeholders, which can be resolved using the `refReplacements` dictionary in the parent section. The placeholder format is `\\$\\d+` and needs to be surrounded by columns or string start/end. It can be captured with the following regular expression: `(^|:)\\$\\d+(:|$)`  Example of the aforementioned environmental zone reference in compact form: `$0:$1:3455277` With the corresponding `refReplacements`: ``` \"refReplacements\": {   \"0\": \"hrn:here:data::olp-here:rib-2:1557\",   \"1\": \"environmental-zones:all:here:cm:envzone\" } ```   # noqa: E501

        :param ref: The ref of this RoutingZone.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def type(self):
        """Gets the type of this RoutingZone.  # noqa: E501

        Extensible enum: `environmental` `vignette` `...`   The type of a routing zone.   # noqa: E501

        :return: The type of this RoutingZone.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoutingZone.

        Extensible enum: `environmental` `vignette` `...`   The type of a routing zone.   # noqa: E501

        :param type: The type of this RoutingZone.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this RoutingZone.  # noqa: E501

        The routing zone's name.  # noqa: E501

        :return: The name of this RoutingZone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoutingZone.

        The routing zone's name.  # noqa: E501

        :param name: The name of this RoutingZone.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutingZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
