# coding: utf-8

"""
    Public Transit API

    Public Transit is a set of three REST APIs that provides public transit routing information and public transit stations information available within an area or for a given station.   # noqa: E501

    OpenAPI spec version: 8.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'country_name': 'str',
        'state': 'str',
        'county': 'str',
        'city': 'str',
        'district': 'str',
        'subdistrict': 'str',
        'postal_code': 'str',
        'street': 'str',
        'house_number': 'str'
    }

    attribute_map = {
        'country_code': 'countryCode',
        'country_name': 'countryName',
        'state': 'state',
        'county': 'county',
        'city': 'city',
        'district': 'district',
        'subdistrict': 'subdistrict',
        'postal_code': 'postalCode',
        'street': 'street',
        'house_number': 'houseNumber'
    }

    def __init__(self, country_code=None, country_name=None, state=None, county=None, city=None, district=None, subdistrict=None, postal_code=None, street=None, house_number=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._country_code = None
        self._country_name = None
        self._state = None
        self._county = None
        self._city = None
        self._district = None
        self._subdistrict = None
        self._postal_code = None
        self._street = None
        self._house_number = None
        self.discriminator = None
        if country_code is not None:
            self.country_code = country_code
        if country_name is not None:
            self.country_name = country_name
        if state is not None:
            self.state = state
        if county is not None:
            self.county = county
        if city is not None:
            self.city = city
        if district is not None:
            self.district = district
        if subdistrict is not None:
            self.subdistrict = subdistrict
        if postal_code is not None:
            self.postal_code = postal_code
        if street is not None:
            self.street = street
        if house_number is not None:
            self.house_number = house_number

    @property
    def country_code(self):
        """Gets the country_code of this Address.  # noqa: E501

        3 letter ISO 3166-1 country code.  # noqa: E501

        :return: The country_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        3 letter ISO 3166-1 country code.  # noqa: E501

        :param country_code: The country_code of this Address.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this Address.  # noqa: E501

        Name of the country where the place is located.  # noqa: E501

        :return: The country_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this Address.

        Name of the country where the place is located.  # noqa: E501

        :param country_name: The country_name of this Address.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def state(self):
        """Gets the state of this Address.  # noqa: E501

        Name of region or state where the place is located.  # noqa: E501

        :return: The state of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        Name of region or state where the place is located.  # noqa: E501

        :param state: The state of this Address.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def county(self):
        """Gets the county of this Address.  # noqa: E501


        :return: The county of this Address.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Address.


        :param county: The county of this Address.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        Name of the city.  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        Name of the city.  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def district(self):
        """Gets the district of this Address.  # noqa: E501

        District name.  # noqa: E501

        :return: The district of this Address.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Address.

        District name.  # noqa: E501

        :param district: The district of this Address.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def subdistrict(self):
        """Gets the subdistrict of this Address.  # noqa: E501


        :return: The subdistrict of this Address.  # noqa: E501
        :rtype: str
        """
        return self._subdistrict

    @subdistrict.setter
    def subdistrict(self, subdistrict):
        """Sets the subdistrict of this Address.


        :param subdistrict: The subdistrict of this Address.  # noqa: E501
        :type: str
        """

        self._subdistrict = subdistrict

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

        Postal code.  # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Postal code.  # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def street(self):
        """Gets the street of this Address.  # noqa: E501

        Name of the street, square, boulevard, etc.  # noqa: E501

        :return: The street of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        Name of the street, square, boulevard, etc.  # noqa: E501

        :param street: The street of this Address.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def house_number(self):
        """Gets the house_number of this Address.  # noqa: E501

        Civic number.  # noqa: E501

        :return: The house_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this Address.

        Civic number.  # noqa: E501

        :param house_number: The house_number of this Address.  # noqa: E501
        :type: str
        """

        self._house_number = house_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
