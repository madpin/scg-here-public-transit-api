# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EVPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preferred_brands': 'list[str]'
    }

    attribute_map = {
        'preferred_brands': 'preferredBrands'
    }

    def __init__(self, preferred_brands=None):  # noqa: E501
        """EVPost - a model defined in Swagger"""  # noqa: E501
        self._preferred_brands = None
        self.discriminator = None
        if preferred_brands is not None:
            self.preferred_brands = preferred_brands

    @property
    def preferred_brands(self):
        """Gets the preferred_brands of this EVPost.  # noqa: E501

        An array of charging station brand IDs. If `makeReachable` is set to `true`, then charging stations from the specified brands will be preferred as potential charging stops, even if this makes the total route duration (travel time plus charging time) longer (up to 15 minutes per charging stop)  Example of a parameter value preferring two charging station brands: `[\"6e1a148e8ddf06f613599134197b7c1c\",\"6211c90a063d36429b599dda79ae85e3\"]`   # noqa: E501

        :return: The preferred_brands of this EVPost.  # noqa: E501
        :rtype: list[str]
        """
        return self._preferred_brands

    @preferred_brands.setter
    def preferred_brands(self, preferred_brands):
        """Sets the preferred_brands of this EVPost.

        An array of charging station brand IDs. If `makeReachable` is set to `true`, then charging stations from the specified brands will be preferred as potential charging stops, even if this makes the total route duration (travel time plus charging time) longer (up to 15 minutes per charging stop)  Example of a parameter value preferring two charging station brands: `[\"6e1a148e8ddf06f613599134197b7c1c\",\"6211c90a063d36429b599dda79ae85e3\"]`   # noqa: E501

        :param preferred_brands: The preferred_brands of this EVPost.  # noqa: E501
        :type: list[str]
        """

        self._preferred_brands = preferred_brands

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EVPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EVPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
