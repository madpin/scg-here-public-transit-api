# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VehicleRestriction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'cause': 'str',
        'type': 'str',
        'forbidden_hazardous_goods': 'list[HazardousGoodsRestriction]',
        'max_gross_weight': 'int',
        'max_weight_per_axle': 'int',
        'max_height': 'int',
        'max_width': 'int',
        'max_length': 'int',
        'axle_count': 'AllOfVehicleRestrictionAxleCount',
        'tunnel_category': 'AllOfVehicleRestrictionTunnelCategory',
        'time_dependent': 'bool',
        'truck_type': 'AllOfVehicleRestrictionTruckType',
        'vehicle_type': 'AllOfVehicleRestrictionVehicleType',
        'trailer_count': 'AllOfVehicleRestrictionTrailerCount'
    }

    attribute_map = {
        'title': 'title',
        'cause': 'cause',
        'type': 'type',
        'forbidden_hazardous_goods': 'forbiddenHazardousGoods',
        'max_gross_weight': 'maxGrossWeight',
        'max_weight_per_axle': 'maxWeightPerAxle',
        'max_height': 'maxHeight',
        'max_width': 'maxWidth',
        'max_length': 'maxLength',
        'axle_count': 'axleCount',
        'tunnel_category': 'tunnelCategory',
        'time_dependent': 'timeDependent',
        'truck_type': 'truckType',
        'vehicle_type': 'vehicleType',
        'trailer_count': 'trailerCount'
    }

    def __init__(self, title=None, cause=None, type=None, forbidden_hazardous_goods=None, max_gross_weight=None, max_weight_per_axle=None, max_height=None, max_width=None, max_length=None, axle_count=None, tunnel_category=None, time_dependent=None, truck_type=None, vehicle_type=None, trailer_count=None):  # noqa: E501
        """VehicleRestriction - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._cause = None
        self._type = None
        self._forbidden_hazardous_goods = None
        self._max_gross_weight = None
        self._max_weight_per_axle = None
        self._max_height = None
        self._max_width = None
        self._max_length = None
        self._axle_count = None
        self._tunnel_category = None
        self._time_dependent = None
        self._truck_type = None
        self._vehicle_type = None
        self._trailer_count = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if cause is not None:
            self.cause = cause
        self.type = type
        if forbidden_hazardous_goods is not None:
            self.forbidden_hazardous_goods = forbidden_hazardous_goods
        if max_gross_weight is not None:
            self.max_gross_weight = max_gross_weight
        if max_weight_per_axle is not None:
            self.max_weight_per_axle = max_weight_per_axle
        if max_height is not None:
            self.max_height = max_height
        if max_width is not None:
            self.max_width = max_width
        if max_length is not None:
            self.max_length = max_length
        if axle_count is not None:
            self.axle_count = axle_count
        if tunnel_category is not None:
            self.tunnel_category = tunnel_category
        if time_dependent is not None:
            self.time_dependent = time_dependent
        if truck_type is not None:
            self.truck_type = truck_type
        if vehicle_type is not None:
            self.vehicle_type = vehicle_type
        if trailer_count is not None:
            self.trailer_count = trailer_count

    @property
    def title(self):
        """Gets the title of this VehicleRestriction.  # noqa: E501

        Detail title  # noqa: E501

        :return: The title of this VehicleRestriction.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VehicleRestriction.

        Detail title  # noqa: E501

        :param title: The title of this VehicleRestriction.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def cause(self):
        """Gets the cause of this VehicleRestriction.  # noqa: E501

        Cause of the notice  # noqa: E501

        :return: The cause of this VehicleRestriction.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this VehicleRestriction.

        Cause of the notice  # noqa: E501

        :param cause: The cause of this VehicleRestriction.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def type(self):
        """Gets the type of this VehicleRestriction.  # noqa: E501

        Detail type. Each type of detail might contain extra attributes.  **NOTE:** The list of possible detail types may be extended in the future. The client application is expected to handle such a case gracefully.   # noqa: E501

        :return: The type of this VehicleRestriction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VehicleRestriction.

        Detail type. Each type of detail might contain extra attributes.  **NOTE:** The list of possible detail types may be extended in the future. The client application is expected to handle such a case gracefully.   # noqa: E501

        :param type: The type of this VehicleRestriction.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def forbidden_hazardous_goods(self):
        """Gets the forbidden_hazardous_goods of this VehicleRestriction.  # noqa: E501

        Hazardous goods restrictions applied during the trip.  This condition is met when the vehicle's shippedHazardousGoods contains any of the items in this array.   # noqa: E501

        :return: The forbidden_hazardous_goods of this VehicleRestriction.  # noqa: E501
        :rtype: list[HazardousGoodsRestriction]
        """
        return self._forbidden_hazardous_goods

    @forbidden_hazardous_goods.setter
    def forbidden_hazardous_goods(self, forbidden_hazardous_goods):
        """Sets the forbidden_hazardous_goods of this VehicleRestriction.

        Hazardous goods restrictions applied during the trip.  This condition is met when the vehicle's shippedHazardousGoods contains any of the items in this array.   # noqa: E501

        :param forbidden_hazardous_goods: The forbidden_hazardous_goods of this VehicleRestriction.  # noqa: E501
        :type: list[HazardousGoodsRestriction]
        """

        self._forbidden_hazardous_goods = forbidden_hazardous_goods

    @property
    def max_gross_weight(self):
        """Gets the max_gross_weight of this VehicleRestriction.  # noqa: E501

        Contains max permitted gross weight, in kilograms.  This condition is met when the vehicle's `grossWeight` exceeds this value.   # noqa: E501

        :return: The max_gross_weight of this VehicleRestriction.  # noqa: E501
        :rtype: int
        """
        return self._max_gross_weight

    @max_gross_weight.setter
    def max_gross_weight(self, max_gross_weight):
        """Sets the max_gross_weight of this VehicleRestriction.

        Contains max permitted gross weight, in kilograms.  This condition is met when the vehicle's `grossWeight` exceeds this value.   # noqa: E501

        :param max_gross_weight: The max_gross_weight of this VehicleRestriction.  # noqa: E501
        :type: int
        """

        self._max_gross_weight = max_gross_weight

    @property
    def max_weight_per_axle(self):
        """Gets the max_weight_per_axle of this VehicleRestriction.  # noqa: E501

        Contains max permitted weight per axle, in kilograms.  This condition is met when the vehicle's `weightPerAxle` exceeds this value.   # noqa: E501

        :return: The max_weight_per_axle of this VehicleRestriction.  # noqa: E501
        :rtype: int
        """
        return self._max_weight_per_axle

    @max_weight_per_axle.setter
    def max_weight_per_axle(self, max_weight_per_axle):
        """Sets the max_weight_per_axle of this VehicleRestriction.

        Contains max permitted weight per axle, in kilograms.  This condition is met when the vehicle's `weightPerAxle` exceeds this value.   # noqa: E501

        :param max_weight_per_axle: The max_weight_per_axle of this VehicleRestriction.  # noqa: E501
        :type: int
        """

        self._max_weight_per_axle = max_weight_per_axle

    @property
    def max_height(self):
        """Gets the max_height of this VehicleRestriction.  # noqa: E501

        Contains max permitted height, in centimeters.  This condition is met when the vehicle's `height` exceeds this value.   # noqa: E501

        :return: The max_height of this VehicleRestriction.  # noqa: E501
        :rtype: int
        """
        return self._max_height

    @max_height.setter
    def max_height(self, max_height):
        """Sets the max_height of this VehicleRestriction.

        Contains max permitted height, in centimeters.  This condition is met when the vehicle's `height` exceeds this value.   # noqa: E501

        :param max_height: The max_height of this VehicleRestriction.  # noqa: E501
        :type: int
        """

        self._max_height = max_height

    @property
    def max_width(self):
        """Gets the max_width of this VehicleRestriction.  # noqa: E501

        Contains max permitted width, in centimeters.  This condition is met when the vehicle's `width` exceeds this value.   # noqa: E501

        :return: The max_width of this VehicleRestriction.  # noqa: E501
        :rtype: int
        """
        return self._max_width

    @max_width.setter
    def max_width(self, max_width):
        """Sets the max_width of this VehicleRestriction.

        Contains max permitted width, in centimeters.  This condition is met when the vehicle's `width` exceeds this value.   # noqa: E501

        :param max_width: The max_width of this VehicleRestriction.  # noqa: E501
        :type: int
        """

        self._max_width = max_width

    @property
    def max_length(self):
        """Gets the max_length of this VehicleRestriction.  # noqa: E501

        Contains max permitted length, in centimeters.  This condition is met when the vehicle's `length` exceeds this value.   # noqa: E501

        :return: The max_length of this VehicleRestriction.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this VehicleRestriction.

        Contains max permitted length, in centimeters.  This condition is met when the vehicle's `length` exceeds this value.   # noqa: E501

        :param max_length: The max_length of this VehicleRestriction.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def axle_count(self):
        """Gets the axle_count of this VehicleRestriction.  # noqa: E501

        Constrains the restriction to trucks with number of axles within specified range.  This condition is met when the vehicle's `axleCount` is within the range specified.   # noqa: E501

        :return: The axle_count of this VehicleRestriction.  # noqa: E501
        :rtype: AllOfVehicleRestrictionAxleCount
        """
        return self._axle_count

    @axle_count.setter
    def axle_count(self, axle_count):
        """Sets the axle_count of this VehicleRestriction.

        Constrains the restriction to trucks with number of axles within specified range.  This condition is met when the vehicle's `axleCount` is within the range specified.   # noqa: E501

        :param axle_count: The axle_count of this VehicleRestriction.  # noqa: E501
        :type: AllOfVehicleRestrictionAxleCount
        """

        self._axle_count = axle_count

    @property
    def tunnel_category(self):
        """Gets the tunnel_category of this VehicleRestriction.  # noqa: E501

        Specifies the tunnel category used to restrict transport of specific goods.  This condition is met when the value exceeds the tunnel category specified by the vehicle's `tunnelCategory`   # noqa: E501

        :return: The tunnel_category of this VehicleRestriction.  # noqa: E501
        :rtype: AllOfVehicleRestrictionTunnelCategory
        """
        return self._tunnel_category

    @tunnel_category.setter
    def tunnel_category(self, tunnel_category):
        """Sets the tunnel_category of this VehicleRestriction.

        Specifies the tunnel category used to restrict transport of specific goods.  This condition is met when the value exceeds the tunnel category specified by the vehicle's `tunnelCategory`   # noqa: E501

        :param tunnel_category: The tunnel_category of this VehicleRestriction.  # noqa: E501
        :type: AllOfVehicleRestrictionTunnelCategory
        """

        self._tunnel_category = tunnel_category

    @property
    def time_dependent(self):
        """Gets the time_dependent of this VehicleRestriction.  # noqa: E501

        Indicates that restriction depends on time.   # noqa: E501

        :return: The time_dependent of this VehicleRestriction.  # noqa: E501
        :rtype: bool
        """
        return self._time_dependent

    @time_dependent.setter
    def time_dependent(self, time_dependent):
        """Sets the time_dependent of this VehicleRestriction.

        Indicates that restriction depends on time.   # noqa: E501

        :param time_dependent: The time_dependent of this VehicleRestriction.  # noqa: E501
        :type: bool
        """

        self._time_dependent = time_dependent

    @property
    def truck_type(self):
        """Gets the truck_type of this VehicleRestriction.  # noqa: E501

        Constrains the restriction to a specific type of vehicle.  This condition is met if the `vehicle[type]` request parameter matches this value.   # noqa: E501

        :return: The truck_type of this VehicleRestriction.  # noqa: E501
        :rtype: AllOfVehicleRestrictionTruckType
        """
        return self._truck_type

    @truck_type.setter
    def truck_type(self, truck_type):
        """Sets the truck_type of this VehicleRestriction.

        Constrains the restriction to a specific type of vehicle.  This condition is met if the `vehicle[type]` request parameter matches this value.   # noqa: E501

        :param truck_type: The truck_type of this VehicleRestriction.  # noqa: E501
        :type: AllOfVehicleRestrictionTruckType
        """

        self._truck_type = truck_type

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this VehicleRestriction.  # noqa: E501

        Constrains the restriction to a specific type of vehicle.  This condition is met if the `vehicle[type]` request parameter matches this value.   # noqa: E501

        :return: The vehicle_type of this VehicleRestriction.  # noqa: E501
        :rtype: AllOfVehicleRestrictionVehicleType
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this VehicleRestriction.

        Constrains the restriction to a specific type of vehicle.  This condition is met if the `vehicle[type]` request parameter matches this value.   # noqa: E501

        :param vehicle_type: The vehicle_type of this VehicleRestriction.  # noqa: E501
        :type: AllOfVehicleRestrictionVehicleType
        """

        self._vehicle_type = vehicle_type

    @property
    def trailer_count(self):
        """Gets the trailer_count of this VehicleRestriction.  # noqa: E501

        Constrains the restriction to trucks with number of axles within specified range.  This condition is met when the vehicle's `trailerCount` is within the range specified.   # noqa: E501

        :return: The trailer_count of this VehicleRestriction.  # noqa: E501
        :rtype: AllOfVehicleRestrictionTrailerCount
        """
        return self._trailer_count

    @trailer_count.setter
    def trailer_count(self, trailer_count):
        """Sets the trailer_count of this VehicleRestriction.

        Constrains the restriction to trucks with number of axles within specified range.  This condition is met when the vehicle's `trailerCount` is within the range specified.   # noqa: E501

        :param trailer_count: The trailer_count of this VehicleRestriction.  # noqa: E501
        :type: AllOfVehicleRestrictionTrailerCount
        """

        self._trailer_count = trailer_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleRestriction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleRestriction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
