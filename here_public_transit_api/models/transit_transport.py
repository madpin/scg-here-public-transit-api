# coding: utf-8

"""
    Public Transit API

    Public Transit is a set of three REST APIs that provides public transit routing information and public transit stations information available within an area or for a given station.   # noqa: E501

    OpenAPI spec version: 8.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransitTransport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'TransitModeOutput',
        'name': 'str',
        'headsign': 'str',
        'category': 'str',
        'color': 'AllOfTransitTransportColor',
        'text_color': 'AllOfTransitTransportTextColor',
        'short_name': 'str',
        'long_name': 'str'
    }

    attribute_map = {
        'mode': 'mode',
        'name': 'name',
        'headsign': 'headsign',
        'category': 'category',
        'color': 'color',
        'text_color': 'textColor',
        'short_name': 'shortName',
        'long_name': 'longName'
    }

    def __init__(self, mode=None, name=None, headsign=None, category=None, color=None, text_color=None, short_name=None, long_name=None):  # noqa: E501
        """TransitTransport - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._name = None
        self._headsign = None
        self._category = None
        self._color = None
        self._text_color = None
        self._short_name = None
        self._long_name = None
        self.discriminator = None
        self.mode = mode
        if name is not None:
            self.name = name
        if headsign is not None:
            self.headsign = headsign
        if category is not None:
            self.category = category
        if color is not None:
            self.color = color
        if text_color is not None:
            self.text_color = text_color
        if short_name is not None:
            self.short_name = short_name
        if long_name is not None:
            self.long_name = long_name

    @property
    def mode(self):
        """Gets the mode of this TransitTransport.  # noqa: E501


        :return: The mode of this TransitTransport.  # noqa: E501
        :rtype: TransitModeOutput
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this TransitTransport.


        :param mode: The mode of this TransitTransport.  # noqa: E501
        :type: TransitModeOutput
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this TransitTransport.  # noqa: E501

        Transit line name  # noqa: E501

        :return: The name of this TransitTransport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransitTransport.

        Transit line name  # noqa: E501

        :param name: The name of this TransitTransport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def headsign(self):
        """Gets the headsign of this TransitTransport.  # noqa: E501

        Transit line headsign  # noqa: E501

        :return: The headsign of this TransitTransport.  # noqa: E501
        :rtype: str
        """
        return self._headsign

    @headsign.setter
    def headsign(self, headsign):
        """Sets the headsign of this TransitTransport.

        Transit line headsign  # noqa: E501

        :param headsign: The headsign of this TransitTransport.  # noqa: E501
        :type: str
        """

        self._headsign = headsign

    @property
    def category(self):
        """Gets the category of this TransitTransport.  # noqa: E501

        Human readable transport category (such as Bus, Gondola, Tram, Train, ...)  # noqa: E501

        :return: The category of this TransitTransport.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TransitTransport.

        Human readable transport category (such as Bus, Gondola, Tram, Train, ...)  # noqa: E501

        :param category: The category of this TransitTransport.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def color(self):
        """Gets the color of this TransitTransport.  # noqa: E501

        Color of the transport polyline and background for the transport name.  # noqa: E501

        :return: The color of this TransitTransport.  # noqa: E501
        :rtype: AllOfTransitTransportColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TransitTransport.

        Color of the transport polyline and background for the transport name.  # noqa: E501

        :param color: The color of this TransitTransport.  # noqa: E501
        :type: AllOfTransitTransportColor
        """

        self._color = color

    @property
    def text_color(self):
        """Gets the text_color of this TransitTransport.  # noqa: E501

        Color of the transport name.  # noqa: E501

        :return: The text_color of this TransitTransport.  # noqa: E501
        :rtype: AllOfTransitTransportTextColor
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this TransitTransport.

        Color of the transport name.  # noqa: E501

        :param text_color: The text_color of this TransitTransport.  # noqa: E501
        :type: AllOfTransitTransportTextColor
        """

        self._text_color = text_color

    @property
    def short_name(self):
        """Gets the short_name of this TransitTransport.  # noqa: E501

        Short name of a transit line.  # noqa: E501

        :return: The short_name of this TransitTransport.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this TransitTransport.

        Short name of a transit line.  # noqa: E501

        :param short_name: The short_name of this TransitTransport.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def long_name(self):
        """Gets the long_name of this TransitTransport.  # noqa: E501

        Long name of a transit line.  # noqa: E501

        :return: The long_name of this TransitTransport.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this TransitTransport.

        Long name of a transit line.  # noqa: E501

        :param long_name: The long_name of this TransitTransport.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransitTransport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransitTransport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
