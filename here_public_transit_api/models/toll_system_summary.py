# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TollSystemSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'toll_system': 'int',
        'price': 'FarePrice'
    }

    attribute_map = {
        'toll_system': 'tollSystem',
        'price': 'price'
    }

    def __init__(self, toll_system=None, price=None):  # noqa: E501
        """TollSystemSummary - a model defined in Swagger"""  # noqa: E501
        self._toll_system = None
        self._price = None
        self.discriminator = None
        if toll_system is not None:
            self.toll_system = toll_system
        if price is not None:
            self.price = price

    @property
    def toll_system(self):
        """Gets the toll_system of this TollSystemSummary.  # noqa: E501

        Reference index into the `tollSystems` array of the containing section.   # noqa: E501

        :return: The toll_system of this TollSystemSummary.  # noqa: E501
        :rtype: int
        """
        return self._toll_system

    @toll_system.setter
    def toll_system(self, toll_system):
        """Sets the toll_system of this TollSystemSummary.

        Reference index into the `tollSystems` array of the containing section.   # noqa: E501

        :param toll_system: The toll_system of this TollSystemSummary.  # noqa: E501
        :type: int
        """

        self._toll_system = toll_system

    @property
    def price(self):
        """Gets the price of this TollSystemSummary.  # noqa: E501


        :return: The price of this TollSystemSummary.  # noqa: E501
        :rtype: FarePrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TollSystemSummary.


        :param price: The price of this TollSystemSummary.  # noqa: E501
        :type: FarePrice
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TollSystemSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TollSystemSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
