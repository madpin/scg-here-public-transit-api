# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RouterRoute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'notices': 'list[Notice]',
        'sections': 'list[RouterSection]',
        'route_handle': 'str'
    }

    attribute_map = {
        'id': 'id',
        'notices': 'notices',
        'sections': 'sections',
        'route_handle': 'routeHandle'
    }

    def __init__(self, id=None, notices=None, sections=None, route_handle=None):  # noqa: E501
        """RouterRoute - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._notices = None
        self._sections = None
        self._route_handle = None
        self.discriminator = None
        self.id = id
        if notices is not None:
            self.notices = notices
        self.sections = sections
        if route_handle is not None:
            self.route_handle = route_handle

    @property
    def id(self):
        """Gets the id of this RouterRoute.  # noqa: E501

        Unique identifier of the route  # noqa: E501

        :return: The id of this RouterRoute.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RouterRoute.

        Unique identifier of the route  # noqa: E501

        :param id: The id of this RouterRoute.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def notices(self):
        """Gets the notices of this RouterRoute.  # noqa: E501

        Contains a list of issues encountered during the processing of this response.  # noqa: E501

        :return: The notices of this RouterRoute.  # noqa: E501
        :rtype: list[Notice]
        """
        return self._notices

    @notices.setter
    def notices(self, notices):
        """Sets the notices of this RouterRoute.

        Contains a list of issues encountered during the processing of this response.  # noqa: E501

        :param notices: The notices of this RouterRoute.  # noqa: E501
        :type: list[Notice]
        """

        self._notices = notices

    @property
    def sections(self):
        """Gets the sections of this RouterRoute.  # noqa: E501

        An ordered list of vehicle, transit, and pedestrian sections making up the route.   # noqa: E501

        :return: The sections of this RouterRoute.  # noqa: E501
        :rtype: list[RouterSection]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this RouterRoute.

        An ordered list of vehicle, transit, and pedestrian sections making up the route.   # noqa: E501

        :param sections: The sections of this RouterRoute.  # noqa: E501
        :type: list[RouterSection]
        """
        if sections is None:
            raise ValueError("Invalid value for `sections`, must not be `None`")  # noqa: E501

        self._sections = sections

    @property
    def route_handle(self):
        """Gets the route_handle of this RouterRoute.  # noqa: E501

        Opaque handle of the calculated route.  A handle encodes the calculated route. The route can be decoded from a handle at a later point in time as long as the service uses the same map data which was used during encoding.  To request a handle set the `routeHandle` flag in `return` parameter. If a handle is requested, but fails to be calculated for any reason, then the `routeHandle` property is not available in the response. The rest of the route is intact.   # noqa: E501

        :return: The route_handle of this RouterRoute.  # noqa: E501
        :rtype: str
        """
        return self._route_handle

    @route_handle.setter
    def route_handle(self, route_handle):
        """Sets the route_handle of this RouterRoute.

        Opaque handle of the calculated route.  A handle encodes the calculated route. The route can be decoded from a handle at a later point in time as long as the service uses the same map data which was used during encoding.  To request a handle set the `routeHandle` flag in `return` parameter. If a handle is requested, but fails to be calculated for any reason, then the `routeHandle` property is not available in the response. The rest of the route is intact.   # noqa: E501

        :param route_handle: The route_handle of this RouterRoute.  # noqa: E501
        :type: str
        """

        self._route_handle = route_handle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouterRoute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouterRoute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
