# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VehicleSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'Duration',
        'length': 'Distance',
        'consumption': 'Energy',
        'base_duration': 'AllOfVehicleSummaryBaseDuration',
        'typical_duration': 'AllOfVehicleSummaryTypicalDuration',
        'tolls': 'TollSummary'
    }

    attribute_map = {
        'duration': 'duration',
        'length': 'length',
        'consumption': 'consumption',
        'base_duration': 'baseDuration',
        'typical_duration': 'typicalDuration',
        'tolls': 'tolls'
    }

    def __init__(self, duration=None, length=None, consumption=None, base_duration=None, typical_duration=None, tolls=None):  # noqa: E501
        """VehicleSummary - a model defined in Swagger"""  # noqa: E501
        self._duration = None
        self._length = None
        self._consumption = None
        self._base_duration = None
        self._typical_duration = None
        self._tolls = None
        self.discriminator = None
        self.duration = duration
        self.length = length
        if consumption is not None:
            self.consumption = consumption
        if base_duration is not None:
            self.base_duration = base_duration
        if typical_duration is not None:
            self.typical_duration = typical_duration
        if tolls is not None:
            self.tolls = tolls

    @property
    def duration(self):
        """Gets the duration of this VehicleSummary.  # noqa: E501


        :return: The duration of this VehicleSummary.  # noqa: E501
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VehicleSummary.


        :param duration: The duration of this VehicleSummary.  # noqa: E501
        :type: Duration
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def length(self):
        """Gets the length of this VehicleSummary.  # noqa: E501


        :return: The length of this VehicleSummary.  # noqa: E501
        :rtype: Distance
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this VehicleSummary.


        :param length: The length of this VehicleSummary.  # noqa: E501
        :type: Distance
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def consumption(self):
        """Gets the consumption of this VehicleSummary.  # noqa: E501


        :return: The consumption of this VehicleSummary.  # noqa: E501
        :rtype: Energy
        """
        return self._consumption

    @consumption.setter
    def consumption(self, consumption):
        """Sets the consumption of this VehicleSummary.


        :param consumption: The consumption of this VehicleSummary.  # noqa: E501
        :type: Energy
        """

        self._consumption = consumption

    @property
    def base_duration(self):
        """Gets the base_duration of this VehicleSummary.  # noqa: E501

        Duration (in seconds) ignoring time-aware information.  In particular, dynamic traffic information is not taken into account. Only average free-flow speeds based on historical traffic are used to calculate this duration.  The `baseDuration` can also be understood as the best possible duration.   # noqa: E501

        :return: The base_duration of this VehicleSummary.  # noqa: E501
        :rtype: AllOfVehicleSummaryBaseDuration
        """
        return self._base_duration

    @base_duration.setter
    def base_duration(self, base_duration):
        """Sets the base_duration of this VehicleSummary.

        Duration (in seconds) ignoring time-aware information.  In particular, dynamic traffic information is not taken into account. Only average free-flow speeds based on historical traffic are used to calculate this duration.  The `baseDuration` can also be understood as the best possible duration.   # noqa: E501

        :param base_duration: The base_duration of this VehicleSummary.  # noqa: E501
        :type: AllOfVehicleSummaryBaseDuration
        """

        self._base_duration = base_duration

    @property
    def typical_duration(self):
        """Gets the typical_duration of this VehicleSummary.  # noqa: E501

        Duration (in seconds) under typical traffic conditions.  In particular, dynamic traffic information is not taken into account. Instead, speeds that are typical for the given time of day/day of week based on historical traffic are used to calculate this duration.   # noqa: E501

        :return: The typical_duration of this VehicleSummary.  # noqa: E501
        :rtype: AllOfVehicleSummaryTypicalDuration
        """
        return self._typical_duration

    @typical_duration.setter
    def typical_duration(self, typical_duration):
        """Sets the typical_duration of this VehicleSummary.

        Duration (in seconds) under typical traffic conditions.  In particular, dynamic traffic information is not taken into account. Instead, speeds that are typical for the given time of day/day of week based on historical traffic are used to calculate this duration.   # noqa: E501

        :param typical_duration: The typical_duration of this VehicleSummary.  # noqa: E501
        :type: AllOfVehicleSummaryTypicalDuration
        """

        self._typical_duration = typical_duration

    @property
    def tolls(self):
        """Gets the tolls of this VehicleSummary.  # noqa: E501


        :return: The tolls of this VehicleSummary.  # noqa: E501
        :rtype: TollSummary
        """
        return self._tolls

    @tolls.setter
    def tolls(self, tolls):
        """Sets the tolls of this VehicleSummary.


        :param tolls: The tolls of this VehicleSummary.  # noqa: E501
        :type: TollSummary
        """

        self._tolls = tolls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
