# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TollSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'FarePrice',
        'total_by_system': 'list[TollSystemSummary]',
        'total_by_country': 'list[TollCountrySummary]'
    }

    attribute_map = {
        'total': 'total',
        'total_by_system': 'totalBySystem',
        'total_by_country': 'totalByCountry'
    }

    def __init__(self, total=None, total_by_system=None, total_by_country=None):  # noqa: E501
        """TollSummary - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._total_by_system = None
        self._total_by_country = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if total_by_system is not None:
            self.total_by_system = total_by_system
        if total_by_country is not None:
            self.total_by_country = total_by_country

    @property
    def total(self):
        """Gets the total of this TollSummary.  # noqa: E501


        :return: The total of this TollSummary.  # noqa: E501
        :rtype: FarePrice
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TollSummary.


        :param total: The total of this TollSummary.  # noqa: E501
        :type: FarePrice
        """

        self._total = total

    @property
    def total_by_system(self):
        """Gets the total_by_system of this TollSummary.  # noqa: E501

        Total tolls to be paid in the section, grouped per toll system.   # noqa: E501

        :return: The total_by_system of this TollSummary.  # noqa: E501
        :rtype: list[TollSystemSummary]
        """
        return self._total_by_system

    @total_by_system.setter
    def total_by_system(self, total_by_system):
        """Sets the total_by_system of this TollSummary.

        Total tolls to be paid in the section, grouped per toll system.   # noqa: E501

        :param total_by_system: The total_by_system of this TollSummary.  # noqa: E501
        :type: list[TollSystemSummary]
        """

        self._total_by_system = total_by_system

    @property
    def total_by_country(self):
        """Gets the total_by_country of this TollSummary.  # noqa: E501

        Total tolls to be paid in the section, grouped per country.   # noqa: E501

        :return: The total_by_country of this TollSummary.  # noqa: E501
        :rtype: list[TollCountrySummary]
        """
        return self._total_by_country

    @total_by_country.setter
    def total_by_country(self, total_by_country):
        """Sets the total_by_country of this TollSummary.

        Total tolls to be paid in the section, grouped per country.   # noqa: E501

        :param total_by_country: The total_by_country of this TollSummary.  # noqa: E501
        :type: list[TollCountrySummary]
        """

        self._total_by_country = total_by_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TollSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TollSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
