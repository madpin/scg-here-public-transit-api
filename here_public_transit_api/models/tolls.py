# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tolls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transponders': 'str',
        'vignettes': 'str',
        'summaries': 'list[str]',
        'vehicle_category': 'str',
        'emission_type': 'str'
    }

    attribute_map = {
        'transponders': 'transponders',
        'vignettes': 'vignettes',
        'summaries': 'summaries',
        'vehicle_category': 'vehicleCategory',
        'emission_type': 'emissionType'
    }

    def __init__(self, transponders=None, vignettes=None, summaries=None, vehicle_category=None, emission_type=None):  # noqa: E501
        """Tolls - a model defined in Swagger"""  # noqa: E501
        self._transponders = None
        self._vignettes = None
        self._summaries = None
        self._vehicle_category = None
        self._emission_type = None
        self.discriminator = None
        if transponders is not None:
            self.transponders = transponders
        if vignettes is not None:
            self.vignettes = vignettes
        if summaries is not None:
            self.summaries = summaries
        if vehicle_category is not None:
            self.vehicle_category = vehicle_category
        if emission_type is not None:
            self.emission_type = emission_type

    @property
    def transponders(self):
        """Gets the transponders of this Tolls.  # noqa: E501

        This parameter allows the user to specify for which systems the user has valid transponders. If a toll requires a certain transponder and the user states they have that transponder, no notices will be given regarding the requirement to have it. Additionally, the price for payment with transponders will be used when reporting fare prices and summaries, if required by the `tolls[summaries]` parameter.  The value of the parameter is a comma-separated list of transponder systems that the user has. Alternatively, the user can also specify `all` as a list element to state they have all required transponders along any potential route.  **Note**: currently, the only valid value is `all`.   # noqa: E501

        :return: The transponders of this Tolls.  # noqa: E501
        :rtype: str
        """
        return self._transponders

    @transponders.setter
    def transponders(self, transponders):
        """Sets the transponders of this Tolls.

        This parameter allows the user to specify for which systems the user has valid transponders. If a toll requires a certain transponder and the user states they have that transponder, no notices will be given regarding the requirement to have it. Additionally, the price for payment with transponders will be used when reporting fare prices and summaries, if required by the `tolls[summaries]` parameter.  The value of the parameter is a comma-separated list of transponder systems that the user has. Alternatively, the user can also specify `all` as a list element to state they have all required transponders along any potential route.  **Note**: currently, the only valid value is `all`.   # noqa: E501

        :param transponders: The transponders of this Tolls.  # noqa: E501
        :type: str
        """

        self._transponders = transponders

    @property
    def vignettes(self):
        """Gets the vignettes of this Tolls.  # noqa: E501

        This parameter allows the user to specify for which toll roads the user has valid vignettes. If a road requires a certain vignette and the user states that they have it, no notices will be given regarding the requirement to have it.  The value of the parameter is a comma-separated list of vignettes that the user has. Alternatively, the user can also specify `all` as a list element to state they have all required vignettes along any potential route.  No toll costs information will be returned for a given road requiring a vignette if the user states they already have it, as no further payment is necessary. If `tolls` are requested for spans, the toll sections for these types of toll systems are still reported, nevertheless.  **Note**: currently, the only valid value is `all`.   # noqa: E501

        :return: The vignettes of this Tolls.  # noqa: E501
        :rtype: str
        """
        return self._vignettes

    @vignettes.setter
    def vignettes(self, vignettes):
        """Sets the vignettes of this Tolls.

        This parameter allows the user to specify for which toll roads the user has valid vignettes. If a road requires a certain vignette and the user states that they have it, no notices will be given regarding the requirement to have it.  The value of the parameter is a comma-separated list of vignettes that the user has. Alternatively, the user can also specify `all` as a list element to state they have all required vignettes along any potential route.  No toll costs information will be returned for a given road requiring a vignette if the user states they already have it, as no further payment is necessary. If `tolls` are requested for spans, the toll sections for these types of toll systems are still reported, nevertheless.  **Note**: currently, the only valid value is `all`.   # noqa: E501

        :param vignettes: The vignettes of this Tolls.  # noqa: E501
        :type: str
        """

        self._vignettes = vignettes

    @property
    def summaries(self):
        """Gets the summaries of this Tolls.  # noqa: E501

        Items extensible enum: `total` `tollSystem` `country` `...`   This parameter allows the user to specify criteria for tolls aggregation. Multiple values may be requested at once. Toll aggregation is performed at the section level only.  Possible values are:   - `total`: the user wants a single value summarizing the tolls to be paid in the section.     This summary criterion requires that a `currency` has been passed as a parameter, to group     multi-currency roads together, even if the route would traverse roads that use only one currency;     see `currency` parameter.   - `tollSystem`: toll costs are aggregated per toll system.   - `country`: toll costs are aggregated per country.  Note that any toll instance may have multiple prices, depending on factors such as time of day, payment methods, etc. that are not available in the request. As a result, the most economical value is selected for summary calculation, so summaries should be considered informative only.   # noqa: E501

        :return: The summaries of this Tolls.  # noqa: E501
        :rtype: list[str]
        """
        return self._summaries

    @summaries.setter
    def summaries(self, summaries):
        """Sets the summaries of this Tolls.

        Items extensible enum: `total` `tollSystem` `country` `...`   This parameter allows the user to specify criteria for tolls aggregation. Multiple values may be requested at once. Toll aggregation is performed at the section level only.  Possible values are:   - `total`: the user wants a single value summarizing the tolls to be paid in the section.     This summary criterion requires that a `currency` has been passed as a parameter, to group     multi-currency roads together, even if the route would traverse roads that use only one currency;     see `currency` parameter.   - `tollSystem`: toll costs are aggregated per toll system.   - `country`: toll costs are aggregated per country.  Note that any toll instance may have multiple prices, depending on factors such as time of day, payment methods, etc. that are not available in the request. As a result, the most economical value is selected for summary calculation, so summaries should be considered informative only.   # noqa: E501

        :param summaries: The summaries of this Tolls.  # noqa: E501
        :type: list[str]
        """

        self._summaries = summaries

    @property
    def vehicle_category(self):
        """Gets the vehicle_category of this Tolls.  # noqa: E501

        Extensible enum: `minibus` `...`   Defines special toll vehicle types. Usual types like car or truck are determined from transport mode.  | category  | Description | | --------- | ------- | | minibus | Commercial buses with a seating capacity of 16-25 passengers (NA) or a small bus that is used to transport a maximum of 15 passengers. Can be used only with transport mode `car` |  **NOTE:** It can be extended by other vehicle categories in the future.   # noqa: E501

        :return: The vehicle_category of this Tolls.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_category

    @vehicle_category.setter
    def vehicle_category(self, vehicle_category):
        """Sets the vehicle_category of this Tolls.

        Extensible enum: `minibus` `...`   Defines special toll vehicle types. Usual types like car or truck are determined from transport mode.  | category  | Description | | --------- | ------- | | minibus | Commercial buses with a seating capacity of 16-25 passengers (NA) or a small bus that is used to transport a maximum of 15 passengers. Can be used only with transport mode `car` |  **NOTE:** It can be extended by other vehicle categories in the future.   # noqa: E501

        :param vehicle_category: The vehicle_category of this Tolls.  # noqa: E501
        :type: str
        """

        self._vehicle_category = vehicle_category

    @property
    def emission_type(self):
        """Gets the emission_type of this Tolls.  # noqa: E501

        Extensible enum: `euro1` `euro2` `euro3` `euro4` `euro5` `euro6` `euroEev` `...`   Defines the emission classes as defined by the toll operator. The types defined are based on the Emission standards. Emission types are only published when the toll cost is defined based on emission classes.  **NOTE:** This parameter is not compatible with EV routing: When EV routing is used, the appropriate emission type (Electric Vehicle) is used.   # noqa: E501

        :return: The emission_type of this Tolls.  # noqa: E501
        :rtype: str
        """
        return self._emission_type

    @emission_type.setter
    def emission_type(self, emission_type):
        """Sets the emission_type of this Tolls.

        Extensible enum: `euro1` `euro2` `euro3` `euro4` `euro5` `euro6` `euroEev` `...`   Defines the emission classes as defined by the toll operator. The types defined are based on the Emission standards. Emission types are only published when the toll cost is defined based on emission classes.  **NOTE:** This parameter is not compatible with EV routing: When EV routing is used, the appropriate emission type (Electric Vehicle) is used.   # noqa: E501

        :param emission_type: The emission_type of this Tolls.  # noqa: E501
        :type: str
        """

        self._emission_type = emission_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tolls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tolls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
