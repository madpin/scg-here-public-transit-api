# coding: utf-8

"""
    Public Transit API

    Public Transit is a set of three REST APIs that provides public transit routing information and public transit stations information available within an area or for a given station.   # noqa: E501

    OpenAPI spec version: 8.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoadInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'RoadInfoType',
        'name': 'list[LocalizedString]',
        'number': 'list[LocalizedString]',
        'toward': 'list[LocalizedString]'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'number': 'number',
        'toward': 'toward'
    }

    def __init__(self, type=None, name=None, number=None, toward=None):  # noqa: E501
        """RoadInfo - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._number = None
        self._toward = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if toward is not None:
            self.toward = toward

    @property
    def type(self):
        """Gets the type of this RoadInfo.  # noqa: E501


        :return: The type of this RoadInfo.  # noqa: E501
        :rtype: RoadInfoType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoadInfo.


        :param type: The type of this RoadInfo.  # noqa: E501
        :type: RoadInfoType
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this RoadInfo.  # noqa: E501

        Name of the road  If the road has multiple names, each name will be a separate entry in the array. The road names can be in multiple languages. If a preferred language was provided, and names in that language are available, they will be prioritized in the array. Otherwise the default name of the street is prioritized.   # noqa: E501

        :return: The name of this RoadInfo.  # noqa: E501
        :rtype: list[LocalizedString]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoadInfo.

        Name of the road  If the road has multiple names, each name will be a separate entry in the array. The road names can be in multiple languages. If a preferred language was provided, and names in that language are available, they will be prioritized in the array. Otherwise the default name of the street is prioritized.   # noqa: E501

        :param name: The name of this RoadInfo.  # noqa: E501
        :type: list[LocalizedString]
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this RoadInfo.  # noqa: E501

        Route name or number (e.g. 'M25')  # noqa: E501

        :return: The number of this RoadInfo.  # noqa: E501
        :rtype: list[LocalizedString]
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this RoadInfo.

        Route name or number (e.g. 'M25')  # noqa: E501

        :param number: The number of this RoadInfo.  # noqa: E501
        :type: list[LocalizedString]
        """

        self._number = number

    @property
    def toward(self):
        """Gets the toward of this RoadInfo.  # noqa: E501

        Names of destinations on sign which can be reached when going in that direction  # noqa: E501

        :return: The toward of this RoadInfo.  # noqa: E501
        :rtype: list[LocalizedString]
        """
        return self._toward

    @toward.setter
    def toward(self, toward):
        """Sets the toward of this RoadInfo.

        Names of destinations on sign which can be reached when going in that direction  # noqa: E501

        :param toward: The toward of this RoadInfo.  # noqa: E501
        :type: list[LocalizedString]
        """

        self._toward = toward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoadInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoadInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
