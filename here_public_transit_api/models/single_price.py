# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SinglePrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'estimated': 'bool',
        'currency': 'str',
        'unit': 'AllOfSinglePriceUnit',
        'value': 'float'
    }

    attribute_map = {
        'type': 'type',
        'estimated': 'estimated',
        'currency': 'currency',
        'unit': 'unit',
        'value': 'value'
    }

    def __init__(self, type=None, estimated=False, currency=None, unit=None, value=None):  # noqa: E501
        """SinglePrice - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._estimated = None
        self._currency = None
        self._unit = None
        self._value = None
        self.discriminator = None
        self.type = type
        if estimated is not None:
            self.estimated = estimated
        self.currency = currency
        if unit is not None:
            self.unit = unit
        self.value = value

    @property
    def type(self):
        """Gets the type of this SinglePrice.  # noqa: E501

        Type of price represented by this object. The API customer is responsible for correctly visualizing the pricing model. As it is possible to extend the supported price types in the future, the price information should be hidden when an unknown type is encountered.  Available price types are:    * `value` - A single value.   * `range` - A range value that includes a minimum and maximum price.   # noqa: E501

        :return: The type of this SinglePrice.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SinglePrice.

        Type of price represented by this object. The API customer is responsible for correctly visualizing the pricing model. As it is possible to extend the supported price types in the future, the price information should be hidden when an unknown type is encountered.  Available price types are:    * `value` - A single value.   * `range` - A range value that includes a minimum and maximum price.   # noqa: E501

        :param type: The type of this SinglePrice.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def estimated(self):
        """Gets the estimated of this SinglePrice.  # noqa: E501

        Attribute value is `true` if the fare price is estimated, `false` if it is an exact value.  # noqa: E501

        :return: The estimated of this SinglePrice.  # noqa: E501
        :rtype: bool
        """
        return self._estimated

    @estimated.setter
    def estimated(self, estimated):
        """Sets the estimated of this SinglePrice.

        Attribute value is `true` if the fare price is estimated, `false` if it is an exact value.  # noqa: E501

        :param estimated: The estimated of this SinglePrice.  # noqa: E501
        :type: bool
        """

        self._estimated = estimated

    @property
    def currency(self):
        """Gets the currency of this SinglePrice.  # noqa: E501

        Local currency of the price compliant to ISO 4217  # noqa: E501

        :return: The currency of this SinglePrice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SinglePrice.

        Local currency of the price compliant to ISO 4217  # noqa: E501

        :param currency: The currency of this SinglePrice.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def unit(self):
        """Gets the unit of this SinglePrice.  # noqa: E501

        When set, the price is paid for a specific duration.  Examples:   * `\"unit\": 3600` - price for one hour   * `\"unit\": 28800` - price for 8 hours   * `\"unit\": 86400` - price for one day   # noqa: E501

        :return: The unit of this SinglePrice.  # noqa: E501
        :rtype: AllOfSinglePriceUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SinglePrice.

        When set, the price is paid for a specific duration.  Examples:   * `\"unit\": 3600` - price for one hour   * `\"unit\": 28800` - price for 8 hours   * `\"unit\": 86400` - price for one day   # noqa: E501

        :param unit: The unit of this SinglePrice.  # noqa: E501
        :type: AllOfSinglePriceUnit
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this SinglePrice.  # noqa: E501

        The price value  # noqa: E501

        :return: The value of this SinglePrice.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SinglePrice.

        The price value  # noqa: E501

        :param value: The value of this SinglePrice.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SinglePrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SinglePrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
