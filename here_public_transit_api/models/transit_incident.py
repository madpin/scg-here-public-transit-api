# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransitIncident(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary': 'str',
        'description': 'str',
        'type': 'TransitIncidentType',
        'effect': 'TransitIncidentEffect',
        'valid_from': 'Time',
        'valid_until': 'Time',
        'url': 'AllOfTransitIncidentUrl'
    }

    attribute_map = {
        'summary': 'summary',
        'description': 'description',
        'type': 'type',
        'effect': 'effect',
        'valid_from': 'validFrom',
        'valid_until': 'validUntil',
        'url': 'url'
    }

    def __init__(self, summary=None, description=None, type=None, effect=None, valid_from=None, valid_until=None, url=None):  # noqa: E501
        """TransitIncident - a model defined in Swagger"""  # noqa: E501
        self._summary = None
        self._description = None
        self._type = None
        self._effect = None
        self._valid_from = None
        self._valid_until = None
        self._url = None
        self.discriminator = None
        if summary is not None:
            self.summary = summary
        if description is not None:
            self.description = description
        self.type = type
        self.effect = effect
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_until is not None:
            self.valid_until = valid_until
        if url is not None:
            self.url = url

    @property
    def summary(self):
        """Gets the summary of this TransitIncident.  # noqa: E501

        A human readable summary of the incident  # noqa: E501

        :return: The summary of this TransitIncident.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this TransitIncident.

        A human readable summary of the incident  # noqa: E501

        :param summary: The summary of this TransitIncident.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this TransitIncident.  # noqa: E501

        A human readable description of the incident  # noqa: E501

        :return: The description of this TransitIncident.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransitIncident.

        A human readable description of the incident  # noqa: E501

        :param description: The description of this TransitIncident.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this TransitIncident.  # noqa: E501


        :return: The type of this TransitIncident.  # noqa: E501
        :rtype: TransitIncidentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransitIncident.


        :param type: The type of this TransitIncident.  # noqa: E501
        :type: TransitIncidentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def effect(self):
        """Gets the effect of this TransitIncident.  # noqa: E501


        :return: The effect of this TransitIncident.  # noqa: E501
        :rtype: TransitIncidentEffect
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this TransitIncident.


        :param effect: The effect of this TransitIncident.  # noqa: E501
        :type: TransitIncidentEffect
        """
        if effect is None:
            raise ValueError("Invalid value for `effect`, must not be `None`")  # noqa: E501

        self._effect = effect

    @property
    def valid_from(self):
        """Gets the valid_from of this TransitIncident.  # noqa: E501


        :return: The valid_from of this TransitIncident.  # noqa: E501
        :rtype: Time
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this TransitIncident.


        :param valid_from: The valid_from of this TransitIncident.  # noqa: E501
        :type: Time
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this TransitIncident.  # noqa: E501


        :return: The valid_until of this TransitIncident.  # noqa: E501
        :rtype: Time
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this TransitIncident.


        :param valid_until: The valid_until of this TransitIncident.  # noqa: E501
        :type: Time
        """

        self._valid_until = valid_until

    @property
    def url(self):
        """Gets the url of this TransitIncident.  # noqa: E501

        Link to the original incident published at the agency website  # noqa: E501

        :return: The url of this TransitIncident.  # noqa: E501
        :rtype: AllOfTransitIncidentUrl
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TransitIncident.

        Link to the original incident published at the agency website  # noqa: E501

        :param url: The url of this TransitIncident.  # noqa: E501
        :type: AllOfTransitIncidentUrl
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransitIncident, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransitIncident):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
