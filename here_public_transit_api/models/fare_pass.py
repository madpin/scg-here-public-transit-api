# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FarePass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'return_journey': 'bool',
        'validity_period': 'FarePassValidityPeriod',
        'travels': 'int',
        'transfers': 'int',
        'senior_pass': 'bool'
    }

    attribute_map = {
        'return_journey': 'returnJourney',
        'validity_period': 'validityPeriod',
        'travels': 'travels',
        'transfers': 'transfers',
        'senior_pass': 'seniorPass'
    }

    def __init__(self, return_journey=None, validity_period=None, travels=None, transfers=None, senior_pass=None):  # noqa: E501
        """FarePass - a model defined in Swagger"""  # noqa: E501
        self._return_journey = None
        self._validity_period = None
        self._travels = None
        self._transfers = None
        self._senior_pass = None
        self.discriminator = None
        if return_journey is not None:
            self.return_journey = return_journey
        if validity_period is not None:
            self.validity_period = validity_period
        if travels is not None:
            self.travels = travels
        if transfers is not None:
            self.transfers = transfers
        if senior_pass is not None:
            self.senior_pass = senior_pass

    @property
    def return_journey(self):
        """Gets the return_journey of this FarePass.  # noqa: E501

        This pass includes the fare for the return journey.  # noqa: E501

        :return: The return_journey of this FarePass.  # noqa: E501
        :rtype: bool
        """
        return self._return_journey

    @return_journey.setter
    def return_journey(self, return_journey):
        """Sets the return_journey of this FarePass.

        This pass includes the fare for the return journey.  # noqa: E501

        :param return_journey: The return_journey of this FarePass.  # noqa: E501
        :type: bool
        """

        self._return_journey = return_journey

    @property
    def validity_period(self):
        """Gets the validity_period of this FarePass.  # noqa: E501


        :return: The validity_period of this FarePass.  # noqa: E501
        :rtype: FarePassValidityPeriod
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this FarePass.


        :param validity_period: The validity_period of this FarePass.  # noqa: E501
        :type: FarePassValidityPeriod
        """

        self._validity_period = validity_period

    @property
    def travels(self):
        """Gets the travels of this FarePass.  # noqa: E501

        This pass allows for the specified number of travels.  # noqa: E501

        :return: The travels of this FarePass.  # noqa: E501
        :rtype: int
        """
        return self._travels

    @travels.setter
    def travels(self, travels):
        """Sets the travels of this FarePass.

        This pass allows for the specified number of travels.  # noqa: E501

        :param travels: The travels of this FarePass.  # noqa: E501
        :type: int
        """

        self._travels = travels

    @property
    def transfers(self):
        """Gets the transfers of this FarePass.  # noqa: E501

        Indicates if transfers are permitted with this pass, and if so, how many.  # noqa: E501

        :return: The transfers of this FarePass.  # noqa: E501
        :rtype: int
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers):
        """Sets the transfers of this FarePass.

        Indicates if transfers are permitted with this pass, and if so, how many.  # noqa: E501

        :param transfers: The transfers of this FarePass.  # noqa: E501
        :type: int
        """

        self._transfers = transfers

    @property
    def senior_pass(self):
        """Gets the senior_pass of this FarePass.  # noqa: E501

        This pass is valid only if presented by a senior person.  # noqa: E501

        :return: The senior_pass of this FarePass.  # noqa: E501
        :rtype: bool
        """
        return self._senior_pass

    @senior_pass.setter
    def senior_pass(self, senior_pass):
        """Sets the senior_pass of this FarePass.

        This pass is valid only if presented by a senior person.  # noqa: E501

        :param senior_pass: The senior_pass of this FarePass.  # noqa: E501
        :type: bool
        """

        self._senior_pass = senior_pass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarePass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarePass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
