# coding: utf-8

"""
    Public Transit API

    Public Transit is a set of three REST APIs that provides public transit routing information and public transit stations information available within an area or for a given station.   # noqa: E501

    OpenAPI spec version: 8.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransitDeparture(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'AllOfTransitDepartureTime',
        'place': 'AllOfTransitDeparturePlace',
        'delay': 'AllOfTransitDepartureDelay',
        'status': 'DepartureStatus'
    }

    attribute_map = {
        'time': 'time',
        'place': 'place',
        'delay': 'delay',
        'status': 'status'
    }

    def __init__(self, time=None, place=None, delay=None, status=None):  # noqa: E501
        """TransitDeparture - a model defined in Swagger"""  # noqa: E501
        self._time = None
        self._place = None
        self._delay = None
        self._status = None
        self.discriminator = None
        if time is not None:
            self.time = time
        self.place = place
        if delay is not None:
            self.delay = delay
        if status is not None:
            self.status = status

    @property
    def time(self):
        """Gets the time of this TransitDeparture.  # noqa: E501

        Expected time of departure of the event. Format is **RFC 3339**, section 5.6 as defined by `date-time`.  # noqa: E501

        :return: The time of this TransitDeparture.  # noqa: E501
        :rtype: AllOfTransitDepartureTime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TransitDeparture.

        Expected time of departure of the event. Format is **RFC 3339**, section 5.6 as defined by `date-time`.  # noqa: E501

        :param time: The time of this TransitDeparture.  # noqa: E501
        :type: AllOfTransitDepartureTime
        """

        self._time = time

    @property
    def place(self):
        """Gets the place of this TransitDeparture.  # noqa: E501

        Departure/arrival location  # noqa: E501

        :return: The place of this TransitDeparture.  # noqa: E501
        :rtype: AllOfTransitDeparturePlace
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this TransitDeparture.

        Departure/arrival location  # noqa: E501

        :param place: The place of this TransitDeparture.  # noqa: E501
        :type: AllOfTransitDeparturePlace
        """
        if place is None:
            raise ValueError("Invalid value for `place`, must not be `None`")  # noqa: E501

        self._place = place

    @property
    def delay(self):
        """Gets the delay of this TransitDeparture.  # noqa: E501

        The accumulated delay in seconds from the scheduled time of the event.  # noqa: E501

        :return: The delay of this TransitDeparture.  # noqa: E501
        :rtype: AllOfTransitDepartureDelay
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this TransitDeparture.

        The accumulated delay in seconds from the scheduled time of the event.  # noqa: E501

        :param delay: The delay of this TransitDeparture.  # noqa: E501
        :type: AllOfTransitDepartureDelay
        """

        self._delay = delay

    @property
    def status(self):
        """Gets the status of this TransitDeparture.  # noqa: E501


        :return: The status of this TransitDeparture.  # noqa: E501
        :rtype: DepartureStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransitDeparture.


        :param status: The status of this TransitDeparture.  # noqa: E501
        :type: DepartureStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransitDeparture, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransitDeparture):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
