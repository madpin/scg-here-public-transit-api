# coding: utf-8

"""
    Public Transit API

    Public Transit is a set of three REST APIs that provides public transit routing information and public transit stations information available within an area or for a given station.   # noqa: E501

    OpenAPI spec version: 8.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StationBoard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'place': 'AllOfStationBoardPlace',
        'departures': 'list[DepartureDetails]',
        'attributions': 'list[Attribution]'
    }

    attribute_map = {
        'place': 'place',
        'departures': 'departures',
        'attributions': 'attributions'
    }

    def __init__(self, place=None, departures=None, attributions=None):  # noqa: E501
        """StationBoard - a model defined in Swagger"""  # noqa: E501
        self._place = None
        self._departures = None
        self._attributions = None
        self.discriminator = None
        self.place = place
        self.departures = departures
        if attributions is not None:
            self.attributions = attributions

    @property
    def place(self):
        """Gets the place of this StationBoard.  # noqa: E501

        Information about a station or stop.  # noqa: E501

        :return: The place of this StationBoard.  # noqa: E501
        :rtype: AllOfStationBoardPlace
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this StationBoard.

        Information about a station or stop.  # noqa: E501

        :param place: The place of this StationBoard.  # noqa: E501
        :type: AllOfStationBoardPlace
        """
        if place is None:
            raise ValueError("Invalid value for `place`, must not be `None`")  # noqa: E501

        self._place = place

    @property
    def departures(self):
        """Gets the departures of this StationBoard.  # noqa: E501

        A list of departures.  # noqa: E501

        :return: The departures of this StationBoard.  # noqa: E501
        :rtype: list[DepartureDetails]
        """
        return self._departures

    @departures.setter
    def departures(self, departures):
        """Sets the departures of this StationBoard.

        A list of departures.  # noqa: E501

        :param departures: The departures of this StationBoard.  # noqa: E501
        :type: list[DepartureDetails]
        """
        if departures is None:
            raise ValueError("Invalid value for `departures`, must not be `None`")  # noqa: E501

        self._departures = departures

    @property
    def attributions(self):
        """Gets the attributions of this StationBoard.  # noqa: E501

        List of required attributions to display.  # noqa: E501

        :return: The attributions of this StationBoard.  # noqa: E501
        :rtype: list[Attribution]
        """
        return self._attributions

    @attributions.setter
    def attributions(self, attributions):
        """Sets the attributions of this StationBoard.

        List of required attributions to display.  # noqa: E501

        :param attributions: The attributions of this StationBoard.  # noqa: E501
        :type: list[Attribution]
        """

        self._attributions = attributions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StationBoard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StationBoard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
