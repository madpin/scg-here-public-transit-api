# coding: utf-8

"""
    Routing API v8

    A location service providing customizable route calculations for a variety of vehicle types as well as pedestrian modes.  # noqa: E501

    OpenAPI spec version: 8.52.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TollCost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'toll_system': 'str',
        'toll_system_ref': 'int',
        'country_code': 'CountryCode',
        'toll_collection_locations': 'list[TollCollectionLocation]',
        'fares': 'list[Fare]'
    }

    attribute_map = {
        'toll_system': 'tollSystem',
        'toll_system_ref': 'tollSystemRef',
        'country_code': 'countryCode',
        'toll_collection_locations': 'tollCollectionLocations',
        'fares': 'fares'
    }

    def __init__(self, toll_system=None, toll_system_ref=None, country_code=None, toll_collection_locations=None, fares=None):  # noqa: E501
        """TollCost - a model defined in Swagger"""  # noqa: E501
        self._toll_system = None
        self._toll_system_ref = None
        self._country_code = None
        self._toll_collection_locations = None
        self._fares = None
        self.discriminator = None
        self.toll_system = toll_system
        self.toll_system_ref = toll_system_ref
        if country_code is not None:
            self.country_code = country_code
        if toll_collection_locations is not None:
            self.toll_collection_locations = toll_collection_locations
        self.fares = fares

    @property
    def toll_system(self):
        """Gets the toll_system of this TollCost.  # noqa: E501

        Name of the toll system collecting the toll.   # noqa: E501

        :return: The toll_system of this TollCost.  # noqa: E501
        :rtype: str
        """
        return self._toll_system

    @toll_system.setter
    def toll_system(self, toll_system):
        """Sets the toll_system of this TollCost.

        Name of the toll system collecting the toll.   # noqa: E501

        :param toll_system: The toll_system of this TollCost.  # noqa: E501
        :type: str
        """
        if toll_system is None:
            raise ValueError("Invalid value for `toll_system`, must not be `None`")  # noqa: E501

        self._toll_system = toll_system

    @property
    def toll_system_ref(self):
        """Gets the toll_system_ref of this TollCost.  # noqa: E501

        Reference index of the affected toll system in the `tollSystems` array.   # noqa: E501

        :return: The toll_system_ref of this TollCost.  # noqa: E501
        :rtype: int
        """
        return self._toll_system_ref

    @toll_system_ref.setter
    def toll_system_ref(self, toll_system_ref):
        """Sets the toll_system_ref of this TollCost.

        Reference index of the affected toll system in the `tollSystems` array.   # noqa: E501

        :param toll_system_ref: The toll_system_ref of this TollCost.  # noqa: E501
        :type: int
        """
        if toll_system_ref is None:
            raise ValueError("Invalid value for `toll_system_ref`, must not be `None`")  # noqa: E501

        self._toll_system_ref = toll_system_ref

    @property
    def country_code(self):
        """Gets the country_code of this TollCost.  # noqa: E501


        :return: The country_code of this TollCost.  # noqa: E501
        :rtype: CountryCode
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this TollCost.


        :param country_code: The country_code of this TollCost.  # noqa: E501
        :type: CountryCode
        """

        self._country_code = country_code

    @property
    def toll_collection_locations(self):
        """Gets the toll_collection_locations of this TollCost.  # noqa: E501

        Information about the location(s) of the toll places where the fare is collected. In case of entry/exit tolls measured by distance, both entry and exit toll locations are returned. Note that since payment is at only one of these places (normally the exit), the other place *may* be in an unrelated section.   # noqa: E501

        :return: The toll_collection_locations of this TollCost.  # noqa: E501
        :rtype: list[TollCollectionLocation]
        """
        return self._toll_collection_locations

    @toll_collection_locations.setter
    def toll_collection_locations(self, toll_collection_locations):
        """Sets the toll_collection_locations of this TollCost.

        Information about the location(s) of the toll places where the fare is collected. In case of entry/exit tolls measured by distance, both entry and exit toll locations are returned. Note that since payment is at only one of these places (normally the exit), the other place *may* be in an unrelated section.   # noqa: E501

        :param toll_collection_locations: The toll_collection_locations of this TollCost.  # noqa: E501
        :type: list[TollCollectionLocation]
        """

        self._toll_collection_locations = toll_collection_locations

    @property
    def fares(self):
        """Gets the fares of this TollCost.  # noqa: E501

        List of possible `Fare`s to pay, which may depend on time of day, payment method, vehicle characteristics, etc.  **Note**: The router presents only options relevant to the original query, on a best effort basis. Note that a `Fare` for tolls is always a `SinglePrice`.   # noqa: E501

        :return: The fares of this TollCost.  # noqa: E501
        :rtype: list[Fare]
        """
        return self._fares

    @fares.setter
    def fares(self, fares):
        """Sets the fares of this TollCost.

        List of possible `Fare`s to pay, which may depend on time of day, payment method, vehicle characteristics, etc.  **Note**: The router presents only options relevant to the original query, on a best effort basis. Note that a `Fare` for tolls is always a `SinglePrice`.   # noqa: E501

        :param fares: The fares of this TollCost.  # noqa: E501
        :type: list[Fare]
        """
        if fares is None:
            raise ValueError("Invalid value for `fares`, must not be `None`")  # noqa: E501

        self._fares = fares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TollCost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TollCost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
